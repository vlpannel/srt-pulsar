options:
  parameters:
    author: Viveca Pannell
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: Pulsar processing for Small Radio Telesope; combination version (various
      options).
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: pulsar_combination
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: pulsar_combination
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: baseline_time
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: ''
    short_id: ''
    type: eng_float
    value: '30.'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [936, 336.0]
    rotation: 0
    state: true
- name: bins
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: ''
    short_id: ''
    type: intx
    value: '1024'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1096, 92.0]
    rotation: 0
    state: true
- name: blocks_add_xx_0
  id: blocks_add_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1936, 484.0]
    rotation: 0
    state: true
- name: blocks_add_xx_1
  id: blocks_add_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '32'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1616, 996.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [816, 276.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 948.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0_0
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 988.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0_1
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 1028.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0_10
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 1388.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0_11
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 1428.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0_12
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 1468.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0_13
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 1508.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0_14
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 1548.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0_15
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 1588.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0_16
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 1628.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0_17
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 1668.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0_18
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 1708.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0_19
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 1748.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0_2
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 1068.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0_20
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 1788.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0_21
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 1828.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0_22
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 1868.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0_23
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 1908.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0_24
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 1948.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0_25
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 1988.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0_26
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 2028.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0_27
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 2068.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0_28
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 2108.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0_29
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 2148.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0_3
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 1108.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0_30
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 2188.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0_4
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 1148.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0_5
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 1188.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0_6
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 1228.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0_7
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 1268.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0_8
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 1308.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0_0_9
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 1348.0]
    rotation: 0
    state: true
- name: blocks_delay_0
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: inco_dedisp.dedisperse(440, 1, 32, 0, 56.77118, samp_rate/32)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 652.0]
    rotation: 0
    state: true
- name: blocks_delay_0_0
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: inco_dedisp.dedisperse(440, 1, 32, 1, 56.77118, samp_rate/32)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 708.0]
    rotation: 0
    state: true
- name: blocks_delay_0_1
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: inco_dedisp.dedisperse(440, 1, 32, 2, 56.77118, samp_rate/32)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 764.0]
    rotation: 0
    state: true
- name: blocks_delay_0_10
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: inco_dedisp.dedisperse(440, 1, 32,11, 56.77118, samp_rate/32)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 1268.0]
    rotation: 0
    state: true
- name: blocks_delay_0_11
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: inco_dedisp.dedisperse(440, 1, 32, 12, 56.77118, samp_rate/32)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 1324.0]
    rotation: 0
    state: true
- name: blocks_delay_0_12
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: inco_dedisp.dedisperse(440, 1, 32, 13, 56.77118, samp_rate/32)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 1380.0]
    rotation: 0
    state: true
- name: blocks_delay_0_13
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: inco_dedisp.dedisperse(440, 1, 32, 14, 56.77118, samp_rate/32)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 1436.0]
    rotation: 0
    state: true
- name: blocks_delay_0_14
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: inco_dedisp.dedisperse(440, 1, 32, 15, 56.77118, samp_rate/32)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 1492.0]
    rotation: 0
    state: true
- name: blocks_delay_0_14_0
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: inco_dedisp.dedisperse(440, 1, 32, 17, 56.77118, samp_rate/32)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 1604.0]
    rotation: 0
    state: true
- name: blocks_delay_0_14_1
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: inco_dedisp.dedisperse(440, 1, 32, 18, 56.77118, samp_rate/32)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 1660.0]
    rotation: 0
    state: true
- name: blocks_delay_0_14_10
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: inco_dedisp.dedisperse(440, 1, 32, 27, 56.77118, samp_rate/32)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 2164.0]
    rotation: 0
    state: true
- name: blocks_delay_0_14_11
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: inco_dedisp.dedisperse(440, 1, 32, 28, 56.77118, samp_rate/32)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 2220.0]
    rotation: 0
    state: true
- name: blocks_delay_0_14_12
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: inco_dedisp.dedisperse(440, 1, 32, 29, 56.77118, samp_rate/32)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 2276.0]
    rotation: 0
    state: true
- name: blocks_delay_0_14_13
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: inco_dedisp.dedisperse(440, 1, 32, 30, 56.77118, samp_rate/32)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 2332.0]
    rotation: 0
    state: true
- name: blocks_delay_0_14_14
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: inco_dedisp.dedisperse(440, 1, 32, 31, 56.77118, samp_rate/32)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 2388.0]
    rotation: 0
    state: true
- name: blocks_delay_0_14_2
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: inco_dedisp.dedisperse(440, 1, 32, 19, 56.77118, samp_rate/32)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 1716.0]
    rotation: 0
    state: true
- name: blocks_delay_0_14_3
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: inco_dedisp.dedisperse(440, 1, 32, 20, 56.77118, samp_rate/32)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 1772.0]
    rotation: 0
    state: true
- name: blocks_delay_0_14_4
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: inco_dedisp.dedisperse(440, 1, 32, 21, 56.77118, samp_rate/32)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 1828.0]
    rotation: 0
    state: true
- name: blocks_delay_0_14_5
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: inco_dedisp.dedisperse(440, 1, 32, 22, 56.77118, samp_rate/32)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 1884.0]
    rotation: 0
    state: true
- name: blocks_delay_0_14_6
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: inco_dedisp.dedisperse(440, 1, 32, 23, 56.77118, samp_rate/32)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 1940.0]
    rotation: 0
    state: true
- name: blocks_delay_0_14_7
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: inco_dedisp.dedisperse(440, 1, 32, 24, 56.77118, samp_rate/32)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 1996.0]
    rotation: 0
    state: true
- name: blocks_delay_0_14_8
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: inco_dedisp.dedisperse(440, 1, 32, 25, 56.77118, samp_rate/32)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 2052.0]
    rotation: 0
    state: true
- name: blocks_delay_0_14_9
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: inco_dedisp.dedisperse(440, 1, 32, 26, 56.77118, samp_rate/32)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 2108.0]
    rotation: 0
    state: true
- name: blocks_delay_0_15
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: inco_dedisp.dedisperse(440, 1, 32, 16, 56.77118, samp_rate/32)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 1548.0]
    rotation: 0
    state: true
- name: blocks_delay_0_2
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: inco_dedisp.dedisperse(440, 1, 32, 3, 56.77118, samp_rate/32)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 820.0]
    rotation: 0
    state: true
- name: blocks_delay_0_3
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: inco_dedisp.dedisperse(440, 1, 32, 4, 56.77118, samp_rate/32)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 876.0]
    rotation: 0
    state: true
- name: blocks_delay_0_4
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: inco_dedisp.dedisperse(440, 1, 32, 5, 56.77118, samp_rate/32)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 932.0]
    rotation: 0
    state: true
- name: blocks_delay_0_5
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: inco_dedisp.dedisperse(440, 1, 32, 6, 56.77118, samp_rate/32)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 988.0]
    rotation: 0
    state: true
- name: blocks_delay_0_6
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: inco_dedisp.dedisperse(440, 1, 32, 7, 56.77118, samp_rate/32)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 1044.0]
    rotation: 0
    state: true
- name: blocks_delay_0_7
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: inco_dedisp.dedisperse(440, 1, 32, 8, 56.77118, samp_rate/32)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 1100.0]
    rotation: 0
    state: true
- name: blocks_delay_0_8
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: inco_dedisp.dedisperse(440, 1, 32, 9, 56.77118, samp_rate/32)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 1156.0]
    rotation: 0
    state: true
- name: blocks_delay_0_9
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: inco_dedisp.dedisperse(440, 1, 32, 10, 56.77118, samp_rate/32)
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 1212.0]
    rotation: 0
    state: true
- name: blocks_file_sink_0
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    comment: ''
    file: data_sink
    type: float
    unbuffered: 'False'
    vlen: bins
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2000, 336.0]
    rotation: 0
    state: true
- name: blocks_file_source_0
  id: blocks_file_source
  parameters:
    affinity: ''
    alias: ''
    begin_tag: pmt.PMT_NIL
    comment: ''
    file: data_source
    length: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    repeat: 'True'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [104, 440.0]
    rotation: 0
    state: true
- name: blocks_selector_0
  id: blocks_selector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    enabled: 'True'
    input_index: data_source_selector
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '4'
    num_outputs: '1'
    output_index: '0'
    showports: 'True'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 244.0]
    rotation: 0
    state: true
- name: blocks_selector_1
  id: blocks_selector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    enabled: 'True'
    input_index: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '1'
    num_outputs: '2'
    output_index: pfb_block_selector
    showports: 'True'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [520, 272.0]
    rotation: 0
    state: true
- name: blocks_selector_2
  id: blocks_selector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    enabled: 'True'
    input_index: pfb_block_selector
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    num_outputs: '4'
    output_index: output_selector
    showports: 'True'
    type: float
    vlen: bins
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1704, 260.0]
    rotation: 0
    state: true
- name: blocks_tags_strobe_0
  id: blocks_tags_strobe
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    key: pmt.intern("strobe")
    maxoutbuf: '0'
    minoutbuf: '0'
    nsamps: bins
    type: float
    value: pmt.intern("NEW PROFILE")
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1768, 524.0]
    rotation: 0
    state: true
- name: blocks_throttle_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [408, 292.0]
    rotation: 0
    state: true
- name: blocks_vector_to_stream_0
  id: blocks_vector_to_stream
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: bins
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1800, 468.0]
    rotation: 0
    state: true
- name: data_sink
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: ''
    short_id: ''
    type: str
    value: /path/to/data/file
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2000, 132.0]
    rotation: 0
    state: true
- name: data_source
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: ''
    short_id: ''
    type: str
    value: /absolute/path/to/data
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [256, 12.0]
    rotation: 0
    state: true
- name: data_source_selector
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: ''
    short_id: ''
    type: intx
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [256, 80.0]
    rotation: 0
    state: true
- name: deviations
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: ''
    short_id: ''
    type: eng_float
    value: '10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [936, 392.0]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nimport scipy\nfrom scipy import stats\n\nclass filter_outlier_block(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"\n    Filter Outliers Block - passes data points through after replacing outliers\
      \ with median value.\n\n    Parameters\n    ----------\n\n    samp_rate : float,\
      \ int\n        Sample rate of incoming samples. Samples per second.\n\n    time\
      \ : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations\
      \ : int, float\n        Number of deviations of variation from median that determines\
      \ outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate\
      \ median and median absolute deviation. Outliers are points a number of deviations\
      \ away from median (determined by parameter `deviation`). Size of buffer is\
      \ numsamps where numsamps is the number of samples \n    \"\"\"\n\n    def __init__(self,\
      \ samp_rate=(1000000/32), time=30, deviations=10):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Filter Outliers',   # will show up in\
      \ GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        self.samp_rate = samp_rate\n        self.time = time\n \
      \       self.deviations = deviations\n\n        self.buffer = np.array([], dtype=np.float32)\
      \   # buffer to contain data\n        self.data = np.array([], dtype=np.float32)\
      \  # data to pass out\n        self.median = 0.    # median of data in buffer\n\
      \        self.mad = 0.   # median absolute deviation of data in buffer\n   \
      \     \n\n    def work(self, input_items, output_items):\n        numsamps =\
      \ self.samp_rate * self.time   # number of samples to store in buffer\n    \
      \    if self.buffer.size < numsamps:\n            self.buffer = np.append(self.buffer,\
      \ input_items[0])\n        else:\n            self.buffer = np.append(np.delete(self.buffer,\
      \ range(input_items[0].size)), input_items[0][:])\n        if self.buffer.size\
      \ > numsamps:\n            self.buffer = np.delete(self.buffer, range(self.buffer.size\
      \ - numsamps))\n\n        self.data = input_items[0].copy()\n\n        self.median\
      \ = np.median(self.buffer)\n        self.mad = scipy.stats.median_abs_deviation(self.buffer)\n\
      \n        self.data[np.where(np.absolute(self.data - self.median) > (self.deviations\
      \ * self.mad))] = self.median\n        \n        output_items[0][:] = self.data[:]\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    deviations: deviations
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '31250.0'
    time: baseline_time
  states:
    _io_cache: '(''Filter Outliers'', ''filter_outlier_block'', [(''samp_rate'', ''31250.0''),
      (''time'', ''30''), (''deviations'', ''10'')], [(''0'', ''float'', 1)], [(''0'',
      ''float'', 1)], ''\n    Filter Outliers Block - passes data points through after
      replacing outliers with median value.\n\n    Parameters\n    ----------\n\n    samp_rate
      : float, int\n        Sample rate of incoming samples. Samples per second.\n\n    time
      : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations
      : int, float\n        Number of deviations of variation from median that determines
      outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate
      median and median absolute deviation. Outliers are points a number of deviations
      away from median (determined by parameter `deviation`). Size of buffer is numsamps
      where numsamps is the number of samples \n    '', [''deviations'', ''samp_rate'',
      ''time''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [936, 268.0]
    rotation: 0
    state: true
- name: epy_block_0_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nimport scipy\nfrom scipy import stats\n\nclass filter_outlier_block(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"\n    Filter Outliers Block - passes data points through after replacing outliers\
      \ with median value.\n\n    Parameters\n    ----------\n\n    samp_rate : float,\
      \ int\n        Sample rate of incoming samples. Samples per second.\n\n    time\
      \ : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations\
      \ : int, float\n        Number of deviations of variation from median that determines\
      \ outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate\
      \ median and median absolute deviation. Outliers are points a number of deviations\
      \ away from median (determined by parameter `deviation`). Size of buffer is\
      \ numsamps where numsamps is the number of samples \n    \"\"\"\n\n    def __init__(self,\
      \ samp_rate=(1000000/32), time=30, deviations=10):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Filter Outliers',   # will show up in\
      \ GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        self.samp_rate = samp_rate\n        self.time = time\n \
      \       self.deviations = deviations\n\n        self.buffer = np.array([], dtype=np.float32)\
      \   # buffer to contain data\n        self.data = np.array([], dtype=np.float32)\
      \  # data to pass out\n        self.median = 0.    # median of data in buffer\n\
      \        self.mad = 0.   # median absolute deviation of data in buffer\n   \
      \     \n\n    def work(self, input_items, output_items):\n        numsamps =\
      \ self.samp_rate * self.time   # number of samples to store in buffer\n    \
      \    if self.buffer.size < numsamps:\n            self.buffer = np.append(self.buffer,\
      \ input_items[0])\n        else:\n            self.buffer = np.append(np.delete(self.buffer,\
      \ range(input_items[0].size)), input_items[0][:])\n        if self.buffer.size\
      \ > numsamps:\n            self.buffer = np.delete(self.buffer, range(self.buffer.size\
      \ - numsamps))\n\n        self.data = input_items[0].copy()\n\n        self.median\
      \ = np.median(self.buffer)\n        self.mad = scipy.stats.median_abs_deviation(self.buffer)\n\
      \n        self.data[np.where(np.absolute(self.data - self.median) > (self.deviations\
      \ * self.mad))] = self.median\n        \n        output_items[0][:] = self.data[:]\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    deviations: deviations
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '31250.0'
    time: baseline_time
  states:
    _io_cache: '(''Filter Outliers'', ''filter_outlier_block'', [(''samp_rate'', ''31250.0''),
      (''time'', ''30''), (''deviations'', ''10'')], [(''0'', ''float'', 1)], [(''0'',
      ''float'', 1)], ''\n    Filter Outliers Block - passes data points through after
      replacing outliers with median value.\n\n    Parameters\n    ----------\n\n    samp_rate
      : float, int\n        Sample rate of incoming samples. Samples per second.\n\n    time
      : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations
      : int, float\n        Number of deviations of variation from median that determines
      outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate
      median and median absolute deviation. Outliers are points a number of deviations
      away from median (determined by parameter `deviation`). Size of buffer is numsamps
      where numsamps is the number of samples \n    '', [''deviations'', ''samp_rate'',
      ''time''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 644.0]
    rotation: 0
    state: true
- name: epy_block_0_0_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nimport scipy\nfrom scipy import stats\n\nclass filter_outlier_block(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"\n    Filter Outliers Block - passes data points through after replacing outliers\
      \ with median value.\n\n    Parameters\n    ----------\n\n    samp_rate : float,\
      \ int\n        Sample rate of incoming samples. Samples per second.\n\n    time\
      \ : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations\
      \ : int, float\n        Number of deviations of variation from median that determines\
      \ outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate\
      \ median and median absolute deviation. Outliers are points a number of deviations\
      \ away from median (determined by parameter `deviation`). Size of buffer is\
      \ numsamps where numsamps is the number of samples \n    \"\"\"\n\n    def __init__(self,\
      \ samp_rate=(1000000/32), time=30, deviations=10):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Filter Outliers',   # will show up in\
      \ GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        self.samp_rate = samp_rate\n        self.time = time\n \
      \       self.deviations = deviations\n\n        self.buffer = np.array([], dtype=np.float32)\
      \   # buffer to contain data\n        self.data = np.array([], dtype=np.float32)\
      \  # data to pass out\n        self.median = 0.    # median of data in buffer\n\
      \        self.mad = 0.   # median absolute deviation of data in buffer\n   \
      \     \n\n    def work(self, input_items, output_items):\n        numsamps =\
      \ self.samp_rate * self.time   # number of samples to store in buffer\n    \
      \    if self.buffer.size < numsamps:\n            self.buffer = np.append(self.buffer,\
      \ input_items[0])\n        else:\n            self.buffer = np.append(np.delete(self.buffer,\
      \ range(input_items[0].size)), input_items[0][:])\n        if self.buffer.size\
      \ > numsamps:\n            self.buffer = np.delete(self.buffer, range(self.buffer.size\
      \ - numsamps))\n\n        self.data = input_items[0].copy()\n\n        self.median\
      \ = np.median(self.buffer)\n        self.mad = scipy.stats.median_abs_deviation(self.buffer)\n\
      \n        self.data[np.where(np.absolute(self.data - self.median) > (self.deviations\
      \ * self.mad))] = self.median\n        \n        output_items[0][:] = self.data[:]\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    deviations: deviations
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '31250.0'
    time: baseline_time
  states:
    _io_cache: '(''Filter Outliers'', ''filter_outlier_block'', [(''samp_rate'', ''31250.0''),
      (''time'', ''30''), (''deviations'', ''10'')], [(''0'', ''float'', 1)], [(''0'',
      ''float'', 1)], ''\n    Filter Outliers Block - passes data points through after
      replacing outliers with median value.\n\n    Parameters\n    ----------\n\n    samp_rate
      : float, int\n        Sample rate of incoming samples. Samples per second.\n\n    time
      : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations
      : int, float\n        Number of deviations of variation from median that determines
      outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate
      median and median absolute deviation. Outliers are points a number of deviations
      away from median (determined by parameter `deviation`). Size of buffer is numsamps
      where numsamps is the number of samples \n    '', [''deviations'', ''samp_rate'',
      ''time''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 700.0]
    rotation: 0
    state: true
- name: epy_block_0_0_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nimport scipy\nfrom scipy import stats\n\nclass filter_outlier_block(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"\n    Filter Outliers Block - passes data points through after replacing outliers\
      \ with median value.\n\n    Parameters\n    ----------\n\n    samp_rate : float,\
      \ int\n        Sample rate of incoming samples. Samples per second.\n\n    time\
      \ : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations\
      \ : int, float\n        Number of deviations of variation from median that determines\
      \ outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate\
      \ median and median absolute deviation. Outliers are points a number of deviations\
      \ away from median (determined by parameter `deviation`). Size of buffer is\
      \ numsamps where numsamps is the number of samples \n    \"\"\"\n\n    def __init__(self,\
      \ samp_rate=(1000000/32), time=30, deviations=10):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Filter Outliers',   # will show up in\
      \ GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        self.samp_rate = samp_rate\n        self.time = time\n \
      \       self.deviations = deviations\n\n        self.buffer = np.array([], dtype=np.float32)\
      \   # buffer to contain data\n        self.data = np.array([], dtype=np.float32)\
      \  # data to pass out\n        self.median = 0.    # median of data in buffer\n\
      \        self.mad = 0.   # median absolute deviation of data in buffer\n   \
      \     \n\n    def work(self, input_items, output_items):\n        numsamps =\
      \ self.samp_rate * self.time   # number of samples to store in buffer\n    \
      \    if self.buffer.size < numsamps:\n            self.buffer = np.append(self.buffer,\
      \ input_items[0])\n        else:\n            self.buffer = np.append(np.delete(self.buffer,\
      \ range(input_items[0].size)), input_items[0][:])\n        if self.buffer.size\
      \ > numsamps:\n            self.buffer = np.delete(self.buffer, range(self.buffer.size\
      \ - numsamps))\n\n        self.data = input_items[0].copy()\n\n        self.median\
      \ = np.median(self.buffer)\n        self.mad = scipy.stats.median_abs_deviation(self.buffer)\n\
      \n        self.data[np.where(np.absolute(self.data - self.median) > (self.deviations\
      \ * self.mad))] = self.median\n        \n        output_items[0][:] = self.data[:]\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    deviations: deviations
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '31250.0'
    time: baseline_time
  states:
    _io_cache: '(''Filter Outliers'', ''filter_outlier_block'', [(''samp_rate'', ''31250.0''),
      (''time'', ''30''), (''deviations'', ''10'')], [(''0'', ''float'', 1)], [(''0'',
      ''float'', 1)], ''\n    Filter Outliers Block - passes data points through after
      replacing outliers with median value.\n\n    Parameters\n    ----------\n\n    samp_rate
      : float, int\n        Sample rate of incoming samples. Samples per second.\n\n    time
      : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations
      : int, float\n        Number of deviations of variation from median that determines
      outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate
      median and median absolute deviation. Outliers are points a number of deviations
      away from median (determined by parameter `deviation`). Size of buffer is numsamps
      where numsamps is the number of samples \n    '', [''deviations'', ''samp_rate'',
      ''time''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 756.0]
    rotation: 0
    state: true
- name: epy_block_0_0_10
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nimport scipy\nfrom scipy import stats\n\nclass filter_outlier_block(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"\n    Filter Outliers Block - passes data points through after replacing outliers\
      \ with median value.\n\n    Parameters\n    ----------\n\n    samp_rate : float,\
      \ int\n        Sample rate of incoming samples. Samples per second.\n\n    time\
      \ : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations\
      \ : int, float\n        Number of deviations of variation from median that determines\
      \ outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate\
      \ median and median absolute deviation. Outliers are points a number of deviations\
      \ away from median (determined by parameter `deviation`). Size of buffer is\
      \ numsamps where numsamps is the number of samples \n    \"\"\"\n\n    def __init__(self,\
      \ samp_rate=(1000000/32), time=30, deviations=10):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Filter Outliers',   # will show up in\
      \ GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        self.samp_rate = samp_rate\n        self.time = time\n \
      \       self.deviations = deviations\n\n        self.buffer = np.array([], dtype=np.float32)\
      \   # buffer to contain data\n        self.data = np.array([], dtype=np.float32)\
      \  # data to pass out\n        self.median = 0.    # median of data in buffer\n\
      \        self.mad = 0.   # median absolute deviation of data in buffer\n   \
      \     \n\n    def work(self, input_items, output_items):\n        numsamps =\
      \ self.samp_rate * self.time   # number of samples to store in buffer\n    \
      \    if self.buffer.size < numsamps:\n            self.buffer = np.append(self.buffer,\
      \ input_items[0])\n        else:\n            self.buffer = np.append(np.delete(self.buffer,\
      \ range(input_items[0].size)), input_items[0][:])\n        if self.buffer.size\
      \ > numsamps:\n            self.buffer = np.delete(self.buffer, range(self.buffer.size\
      \ - numsamps))\n\n        self.data = input_items[0].copy()\n\n        self.median\
      \ = np.median(self.buffer)\n        self.mad = scipy.stats.median_abs_deviation(self.buffer)\n\
      \n        self.data[np.where(np.absolute(self.data - self.median) > (self.deviations\
      \ * self.mad))] = self.median\n        \n        output_items[0][:] = self.data[:]\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    deviations: deviations
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '31250.0'
    time: baseline_time
  states:
    _io_cache: '(''Filter Outliers'', ''filter_outlier_block'', [(''samp_rate'', ''31250.0''),
      (''time'', ''30''), (''deviations'', ''10'')], [(''0'', ''float'', 1)], [(''0'',
      ''float'', 1)], ''\n    Filter Outliers Block - passes data points through after
      replacing outliers with median value.\n\n    Parameters\n    ----------\n\n    samp_rate
      : float, int\n        Sample rate of incoming samples. Samples per second.\n\n    time
      : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations
      : int, float\n        Number of deviations of variation from median that determines
      outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate
      median and median absolute deviation. Outliers are points a number of deviations
      away from median (determined by parameter `deviation`). Size of buffer is numsamps
      where numsamps is the number of samples \n    '', [''deviations'', ''samp_rate'',
      ''time''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 1260.0]
    rotation: 0
    state: true
- name: epy_block_0_0_11
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nimport scipy\nfrom scipy import stats\n\nclass filter_outlier_block(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"\n    Filter Outliers Block - passes data points through after replacing outliers\
      \ with median value.\n\n    Parameters\n    ----------\n\n    samp_rate : float,\
      \ int\n        Sample rate of incoming samples. Samples per second.\n\n    time\
      \ : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations\
      \ : int, float\n        Number of deviations of variation from median that determines\
      \ outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate\
      \ median and median absolute deviation. Outliers are points a number of deviations\
      \ away from median (determined by parameter `deviation`). Size of buffer is\
      \ numsamps where numsamps is the number of samples \n    \"\"\"\n\n    def __init__(self,\
      \ samp_rate=(1000000/32), time=30, deviations=10):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Filter Outliers',   # will show up in\
      \ GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        self.samp_rate = samp_rate\n        self.time = time\n \
      \       self.deviations = deviations\n\n        self.buffer = np.array([], dtype=np.float32)\
      \   # buffer to contain data\n        self.data = np.array([], dtype=np.float32)\
      \  # data to pass out\n        self.median = 0.    # median of data in buffer\n\
      \        self.mad = 0.   # median absolute deviation of data in buffer\n   \
      \     \n\n    def work(self, input_items, output_items):\n        numsamps =\
      \ self.samp_rate * self.time   # number of samples to store in buffer\n    \
      \    if self.buffer.size < numsamps:\n            self.buffer = np.append(self.buffer,\
      \ input_items[0])\n        else:\n            self.buffer = np.append(np.delete(self.buffer,\
      \ range(input_items[0].size)), input_items[0][:])\n        if self.buffer.size\
      \ > numsamps:\n            self.buffer = np.delete(self.buffer, range(self.buffer.size\
      \ - numsamps))\n\n        self.data = input_items[0].copy()\n\n        self.median\
      \ = np.median(self.buffer)\n        self.mad = scipy.stats.median_abs_deviation(self.buffer)\n\
      \n        self.data[np.where(np.absolute(self.data - self.median) > (self.deviations\
      \ * self.mad))] = self.median\n        \n        output_items[0][:] = self.data[:]\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    deviations: deviations
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '31250.0'
    time: baseline_time
  states:
    _io_cache: '(''Filter Outliers'', ''filter_outlier_block'', [(''samp_rate'', ''31250.0''),
      (''time'', ''30''), (''deviations'', ''10'')], [(''0'', ''float'', 1)], [(''0'',
      ''float'', 1)], ''\n    Filter Outliers Block - passes data points through after
      replacing outliers with median value.\n\n    Parameters\n    ----------\n\n    samp_rate
      : float, int\n        Sample rate of incoming samples. Samples per second.\n\n    time
      : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations
      : int, float\n        Number of deviations of variation from median that determines
      outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate
      median and median absolute deviation. Outliers are points a number of deviations
      away from median (determined by parameter `deviation`). Size of buffer is numsamps
      where numsamps is the number of samples \n    '', [''deviations'', ''samp_rate'',
      ''time''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 1316.0]
    rotation: 0
    state: true
- name: epy_block_0_0_12
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nimport scipy\nfrom scipy import stats\n\nclass filter_outlier_block(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"\n    Filter Outliers Block - passes data points through after replacing outliers\
      \ with median value.\n\n    Parameters\n    ----------\n\n    samp_rate : float,\
      \ int\n        Sample rate of incoming samples. Samples per second.\n\n    time\
      \ : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations\
      \ : int, float\n        Number of deviations of variation from median that determines\
      \ outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate\
      \ median and median absolute deviation. Outliers are points a number of deviations\
      \ away from median (determined by parameter `deviation`). Size of buffer is\
      \ numsamps where numsamps is the number of samples \n    \"\"\"\n\n    def __init__(self,\
      \ samp_rate=(1000000/32), time=30, deviations=10):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Filter Outliers',   # will show up in\
      \ GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        self.samp_rate = samp_rate\n        self.time = time\n \
      \       self.deviations = deviations\n\n        self.buffer = np.array([], dtype=np.float32)\
      \   # buffer to contain data\n        self.data = np.array([], dtype=np.float32)\
      \  # data to pass out\n        self.median = 0.    # median of data in buffer\n\
      \        self.mad = 0.   # median absolute deviation of data in buffer\n   \
      \     \n\n    def work(self, input_items, output_items):\n        numsamps =\
      \ self.samp_rate * self.time   # number of samples to store in buffer\n    \
      \    if self.buffer.size < numsamps:\n            self.buffer = np.append(self.buffer,\
      \ input_items[0])\n        else:\n            self.buffer = np.append(np.delete(self.buffer,\
      \ range(input_items[0].size)), input_items[0][:])\n        if self.buffer.size\
      \ > numsamps:\n            self.buffer = np.delete(self.buffer, range(self.buffer.size\
      \ - numsamps))\n\n        self.data = input_items[0].copy()\n\n        self.median\
      \ = np.median(self.buffer)\n        self.mad = scipy.stats.median_abs_deviation(self.buffer)\n\
      \n        self.data[np.where(np.absolute(self.data - self.median) > (self.deviations\
      \ * self.mad))] = self.median\n        \n        output_items[0][:] = self.data[:]\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    deviations: deviations
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '31250.0'
    time: baseline_time
  states:
    _io_cache: '(''Filter Outliers'', ''filter_outlier_block'', [(''samp_rate'', ''31250.0''),
      (''time'', ''30''), (''deviations'', ''10'')], [(''0'', ''float'', 1)], [(''0'',
      ''float'', 1)], ''\n    Filter Outliers Block - passes data points through after
      replacing outliers with median value.\n\n    Parameters\n    ----------\n\n    samp_rate
      : float, int\n        Sample rate of incoming samples. Samples per second.\n\n    time
      : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations
      : int, float\n        Number of deviations of variation from median that determines
      outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate
      median and median absolute deviation. Outliers are points a number of deviations
      away from median (determined by parameter `deviation`). Size of buffer is numsamps
      where numsamps is the number of samples \n    '', [''deviations'', ''samp_rate'',
      ''time''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 1372.0]
    rotation: 0
    state: true
- name: epy_block_0_0_13
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nimport scipy\nfrom scipy import stats\n\nclass filter_outlier_block(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"\n    Filter Outliers Block - passes data points through after replacing outliers\
      \ with median value.\n\n    Parameters\n    ----------\n\n    samp_rate : float,\
      \ int\n        Sample rate of incoming samples. Samples per second.\n\n    time\
      \ : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations\
      \ : int, float\n        Number of deviations of variation from median that determines\
      \ outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate\
      \ median and median absolute deviation. Outliers are points a number of deviations\
      \ away from median (determined by parameter `deviation`). Size of buffer is\
      \ numsamps where numsamps is the number of samples \n    \"\"\"\n\n    def __init__(self,\
      \ samp_rate=(1000000/32), time=30, deviations=10):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Filter Outliers',   # will show up in\
      \ GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        self.samp_rate = samp_rate\n        self.time = time\n \
      \       self.deviations = deviations\n\n        self.buffer = np.array([], dtype=np.float32)\
      \   # buffer to contain data\n        self.data = np.array([], dtype=np.float32)\
      \  # data to pass out\n        self.median = 0.    # median of data in buffer\n\
      \        self.mad = 0.   # median absolute deviation of data in buffer\n   \
      \     \n\n    def work(self, input_items, output_items):\n        numsamps =\
      \ self.samp_rate * self.time   # number of samples to store in buffer\n    \
      \    if self.buffer.size < numsamps:\n            self.buffer = np.append(self.buffer,\
      \ input_items[0])\n        else:\n            self.buffer = np.append(np.delete(self.buffer,\
      \ range(input_items[0].size)), input_items[0][:])\n        if self.buffer.size\
      \ > numsamps:\n            self.buffer = np.delete(self.buffer, range(self.buffer.size\
      \ - numsamps))\n\n        self.data = input_items[0].copy()\n\n        self.median\
      \ = np.median(self.buffer)\n        self.mad = scipy.stats.median_abs_deviation(self.buffer)\n\
      \n        self.data[np.where(np.absolute(self.data - self.median) > (self.deviations\
      \ * self.mad))] = self.median\n        \n        output_items[0][:] = self.data[:]\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    deviations: deviations
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '31250.0'
    time: baseline_time
  states:
    _io_cache: '(''Filter Outliers'', ''filter_outlier_block'', [(''samp_rate'', ''31250.0''),
      (''time'', ''30''), (''deviations'', ''10'')], [(''0'', ''float'', 1)], [(''0'',
      ''float'', 1)], ''\n    Filter Outliers Block - passes data points through after
      replacing outliers with median value.\n\n    Parameters\n    ----------\n\n    samp_rate
      : float, int\n        Sample rate of incoming samples. Samples per second.\n\n    time
      : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations
      : int, float\n        Number of deviations of variation from median that determines
      outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate
      median and median absolute deviation. Outliers are points a number of deviations
      away from median (determined by parameter `deviation`). Size of buffer is numsamps
      where numsamps is the number of samples \n    '', [''deviations'', ''samp_rate'',
      ''time''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 1428.0]
    rotation: 0
    state: true
- name: epy_block_0_0_14
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nimport scipy\nfrom scipy import stats\n\nclass filter_outlier_block(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"\n    Filter Outliers Block - passes data points through after replacing outliers\
      \ with median value.\n\n    Parameters\n    ----------\n\n    samp_rate : float,\
      \ int\n        Sample rate of incoming samples. Samples per second.\n\n    time\
      \ : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations\
      \ : int, float\n        Number of deviations of variation from median that determines\
      \ outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate\
      \ median and median absolute deviation. Outliers are points a number of deviations\
      \ away from median (determined by parameter `deviation`). Size of buffer is\
      \ numsamps where numsamps is the number of samples \n    \"\"\"\n\n    def __init__(self,\
      \ samp_rate=(1000000/32), time=30, deviations=10):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Filter Outliers',   # will show up in\
      \ GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        self.samp_rate = samp_rate\n        self.time = time\n \
      \       self.deviations = deviations\n\n        self.buffer = np.array([], dtype=np.float32)\
      \   # buffer to contain data\n        self.data = np.array([], dtype=np.float32)\
      \  # data to pass out\n        self.median = 0.    # median of data in buffer\n\
      \        self.mad = 0.   # median absolute deviation of data in buffer\n   \
      \     \n\n    def work(self, input_items, output_items):\n        numsamps =\
      \ self.samp_rate * self.time   # number of samples to store in buffer\n    \
      \    if self.buffer.size < numsamps:\n            self.buffer = np.append(self.buffer,\
      \ input_items[0])\n        else:\n            self.buffer = np.append(np.delete(self.buffer,\
      \ range(input_items[0].size)), input_items[0][:])\n        if self.buffer.size\
      \ > numsamps:\n            self.buffer = np.delete(self.buffer, range(self.buffer.size\
      \ - numsamps))\n\n        self.data = input_items[0].copy()\n\n        self.median\
      \ = np.median(self.buffer)\n        self.mad = scipy.stats.median_abs_deviation(self.buffer)\n\
      \n        self.data[np.where(np.absolute(self.data - self.median) > (self.deviations\
      \ * self.mad))] = self.median\n        \n        output_items[0][:] = self.data[:]\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    deviations: deviations
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '31250.0'
    time: baseline_time
  states:
    _io_cache: '(''Filter Outliers'', ''filter_outlier_block'', [(''samp_rate'', ''31250.0''),
      (''time'', ''30''), (''deviations'', ''10'')], [(''0'', ''float'', 1)], [(''0'',
      ''float'', 1)], ''\n    Filter Outliers Block - passes data points through after
      replacing outliers with median value.\n\n    Parameters\n    ----------\n\n    samp_rate
      : float, int\n        Sample rate of incoming samples. Samples per second.\n\n    time
      : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations
      : int, float\n        Number of deviations of variation from median that determines
      outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate
      median and median absolute deviation. Outliers are points a number of deviations
      away from median (determined by parameter `deviation`). Size of buffer is numsamps
      where numsamps is the number of samples \n    '', [''deviations'', ''samp_rate'',
      ''time''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 1484.0]
    rotation: 0
    state: true
- name: epy_block_0_0_14_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nimport scipy\nfrom scipy import stats\n\nclass filter_outlier_block(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"\n    Filter Outliers Block - passes data points through after replacing outliers\
      \ with median value.\n\n    Parameters\n    ----------\n\n    samp_rate : float,\
      \ int\n        Sample rate of incoming samples. Samples per second.\n\n    time\
      \ : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations\
      \ : int, float\n        Number of deviations of variation from median that determines\
      \ outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate\
      \ median and median absolute deviation. Outliers are points a number of deviations\
      \ away from median (determined by parameter `deviation`). Size of buffer is\
      \ numsamps where numsamps is the number of samples \n    \"\"\"\n\n    def __init__(self,\
      \ samp_rate=(1000000/32), time=30, deviations=10):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Filter Outliers',   # will show up in\
      \ GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        self.samp_rate = samp_rate\n        self.time = time\n \
      \       self.deviations = deviations\n\n        self.buffer = np.array([], dtype=np.float32)\
      \   # buffer to contain data\n        self.data = np.array([], dtype=np.float32)\
      \  # data to pass out\n        self.median = 0.    # median of data in buffer\n\
      \        self.mad = 0.   # median absolute deviation of data in buffer\n   \
      \     \n\n    def work(self, input_items, output_items):\n        numsamps =\
      \ self.samp_rate * self.time   # number of samples to store in buffer\n    \
      \    if self.buffer.size < numsamps:\n            self.buffer = np.append(self.buffer,\
      \ input_items[0])\n        else:\n            self.buffer = np.append(np.delete(self.buffer,\
      \ range(input_items[0].size)), input_items[0][:])\n        if self.buffer.size\
      \ > numsamps:\n            self.buffer = np.delete(self.buffer, range(self.buffer.size\
      \ - numsamps))\n\n        self.data = input_items[0].copy()\n\n        self.median\
      \ = np.median(self.buffer)\n        self.mad = scipy.stats.median_abs_deviation(self.buffer)\n\
      \n        self.data[np.where(np.absolute(self.data - self.median) > (self.deviations\
      \ * self.mad))] = self.median\n        \n        output_items[0][:] = self.data[:]\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    deviations: deviations
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '31250.0'
    time: baseline_time
  states:
    _io_cache: '(''Filter Outliers'', ''filter_outlier_block'', [(''samp_rate'', ''31250.0''),
      (''time'', ''30''), (''deviations'', ''10'')], [(''0'', ''float'', 1)], [(''0'',
      ''float'', 1)], ''\n    Filter Outliers Block - passes data points through after
      replacing outliers with median value.\n\n    Parameters\n    ----------\n\n    samp_rate
      : float, int\n        Sample rate of incoming samples. Samples per second.\n\n    time
      : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations
      : int, float\n        Number of deviations of variation from median that determines
      outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate
      median and median absolute deviation. Outliers are points a number of deviations
      away from median (determined by parameter `deviation`). Size of buffer is numsamps
      where numsamps is the number of samples \n    '', [''deviations'', ''samp_rate'',
      ''time''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 1596.0]
    rotation: 0
    state: true
- name: epy_block_0_0_14_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nimport scipy\nfrom scipy import stats\n\nclass filter_outlier_block(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"\n    Filter Outliers Block - passes data points through after replacing outliers\
      \ with median value.\n\n    Parameters\n    ----------\n\n    samp_rate : float,\
      \ int\n        Sample rate of incoming samples. Samples per second.\n\n    time\
      \ : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations\
      \ : int, float\n        Number of deviations of variation from median that determines\
      \ outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate\
      \ median and median absolute deviation. Outliers are points a number of deviations\
      \ away from median (determined by parameter `deviation`). Size of buffer is\
      \ numsamps where numsamps is the number of samples \n    \"\"\"\n\n    def __init__(self,\
      \ samp_rate=(1000000/32), time=30, deviations=10):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Filter Outliers',   # will show up in\
      \ GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        self.samp_rate = samp_rate\n        self.time = time\n \
      \       self.deviations = deviations\n\n        self.buffer = np.array([], dtype=np.float32)\
      \   # buffer to contain data\n        self.data = np.array([], dtype=np.float32)\
      \  # data to pass out\n        self.median = 0.    # median of data in buffer\n\
      \        self.mad = 0.   # median absolute deviation of data in buffer\n   \
      \     \n\n    def work(self, input_items, output_items):\n        numsamps =\
      \ self.samp_rate * self.time   # number of samples to store in buffer\n    \
      \    if self.buffer.size < numsamps:\n            self.buffer = np.append(self.buffer,\
      \ input_items[0])\n        else:\n            self.buffer = np.append(np.delete(self.buffer,\
      \ range(input_items[0].size)), input_items[0][:])\n        if self.buffer.size\
      \ > numsamps:\n            self.buffer = np.delete(self.buffer, range(self.buffer.size\
      \ - numsamps))\n\n        self.data = input_items[0].copy()\n\n        self.median\
      \ = np.median(self.buffer)\n        self.mad = scipy.stats.median_abs_deviation(self.buffer)\n\
      \n        self.data[np.where(np.absolute(self.data - self.median) > (self.deviations\
      \ * self.mad))] = self.median\n        \n        output_items[0][:] = self.data[:]\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    deviations: deviations
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '31250.0'
    time: baseline_time
  states:
    _io_cache: '(''Filter Outliers'', ''filter_outlier_block'', [(''samp_rate'', ''31250.0''),
      (''time'', ''30''), (''deviations'', ''10'')], [(''0'', ''float'', 1)], [(''0'',
      ''float'', 1)], ''\n    Filter Outliers Block - passes data points through after
      replacing outliers with median value.\n\n    Parameters\n    ----------\n\n    samp_rate
      : float, int\n        Sample rate of incoming samples. Samples per second.\n\n    time
      : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations
      : int, float\n        Number of deviations of variation from median that determines
      outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate
      median and median absolute deviation. Outliers are points a number of deviations
      away from median (determined by parameter `deviation`). Size of buffer is numsamps
      where numsamps is the number of samples \n    '', [''deviations'', ''samp_rate'',
      ''time''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 1652.0]
    rotation: 0
    state: true
- name: epy_block_0_0_14_10
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nimport scipy\nfrom scipy import stats\n\nclass filter_outlier_block(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"\n    Filter Outliers Block - passes data points through after replacing outliers\
      \ with median value.\n\n    Parameters\n    ----------\n\n    samp_rate : float,\
      \ int\n        Sample rate of incoming samples. Samples per second.\n\n    time\
      \ : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations\
      \ : int, float\n        Number of deviations of variation from median that determines\
      \ outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate\
      \ median and median absolute deviation. Outliers are points a number of deviations\
      \ away from median (determined by parameter `deviation`). Size of buffer is\
      \ numsamps where numsamps is the number of samples \n    \"\"\"\n\n    def __init__(self,\
      \ samp_rate=(1000000/32), time=30, deviations=10):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Filter Outliers',   # will show up in\
      \ GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        self.samp_rate = samp_rate\n        self.time = time\n \
      \       self.deviations = deviations\n\n        self.buffer = np.array([], dtype=np.float32)\
      \   # buffer to contain data\n        self.data = np.array([], dtype=np.float32)\
      \  # data to pass out\n        self.median = 0.    # median of data in buffer\n\
      \        self.mad = 0.   # median absolute deviation of data in buffer\n   \
      \     \n\n    def work(self, input_items, output_items):\n        numsamps =\
      \ self.samp_rate * self.time   # number of samples to store in buffer\n    \
      \    if self.buffer.size < numsamps:\n            self.buffer = np.append(self.buffer,\
      \ input_items[0])\n        else:\n            self.buffer = np.append(np.delete(self.buffer,\
      \ range(input_items[0].size)), input_items[0][:])\n        if self.buffer.size\
      \ > numsamps:\n            self.buffer = np.delete(self.buffer, range(self.buffer.size\
      \ - numsamps))\n\n        self.data = input_items[0].copy()\n\n        self.median\
      \ = np.median(self.buffer)\n        self.mad = scipy.stats.median_abs_deviation(self.buffer)\n\
      \n        self.data[np.where(np.absolute(self.data - self.median) > (self.deviations\
      \ * self.mad))] = self.median\n        \n        output_items[0][:] = self.data[:]\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    deviations: deviations
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '31250.0'
    time: baseline_time
  states:
    _io_cache: '(''Filter Outliers'', ''filter_outlier_block'', [(''samp_rate'', ''31250.0''),
      (''time'', ''30''), (''deviations'', ''10'')], [(''0'', ''float'', 1)], [(''0'',
      ''float'', 1)], ''\n    Filter Outliers Block - passes data points through after
      replacing outliers with median value.\n\n    Parameters\n    ----------\n\n    samp_rate
      : float, int\n        Sample rate of incoming samples. Samples per second.\n\n    time
      : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations
      : int, float\n        Number of deviations of variation from median that determines
      outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate
      median and median absolute deviation. Outliers are points a number of deviations
      away from median (determined by parameter `deviation`). Size of buffer is numsamps
      where numsamps is the number of samples \n    '', [''deviations'', ''samp_rate'',
      ''time''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 2156.0]
    rotation: 0
    state: true
- name: epy_block_0_0_14_11
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nimport scipy\nfrom scipy import stats\n\nclass filter_outlier_block(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"\n    Filter Outliers Block - passes data points through after replacing outliers\
      \ with median value.\n\n    Parameters\n    ----------\n\n    samp_rate : float,\
      \ int\n        Sample rate of incoming samples. Samples per second.\n\n    time\
      \ : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations\
      \ : int, float\n        Number of deviations of variation from median that determines\
      \ outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate\
      \ median and median absolute deviation. Outliers are points a number of deviations\
      \ away from median (determined by parameter `deviation`). Size of buffer is\
      \ numsamps where numsamps is the number of samples \n    \"\"\"\n\n    def __init__(self,\
      \ samp_rate=(1000000/32), time=30, deviations=10):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Filter Outliers',   # will show up in\
      \ GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        self.samp_rate = samp_rate\n        self.time = time\n \
      \       self.deviations = deviations\n\n        self.buffer = np.array([], dtype=np.float32)\
      \   # buffer to contain data\n        self.data = np.array([], dtype=np.float32)\
      \  # data to pass out\n        self.median = 0.    # median of data in buffer\n\
      \        self.mad = 0.   # median absolute deviation of data in buffer\n   \
      \     \n\n    def work(self, input_items, output_items):\n        numsamps =\
      \ self.samp_rate * self.time   # number of samples to store in buffer\n    \
      \    if self.buffer.size < numsamps:\n            self.buffer = np.append(self.buffer,\
      \ input_items[0])\n        else:\n            self.buffer = np.append(np.delete(self.buffer,\
      \ range(input_items[0].size)), input_items[0][:])\n        if self.buffer.size\
      \ > numsamps:\n            self.buffer = np.delete(self.buffer, range(self.buffer.size\
      \ - numsamps))\n\n        self.data = input_items[0].copy()\n\n        self.median\
      \ = np.median(self.buffer)\n        self.mad = scipy.stats.median_abs_deviation(self.buffer)\n\
      \n        self.data[np.where(np.absolute(self.data - self.median) > (self.deviations\
      \ * self.mad))] = self.median\n        \n        output_items[0][:] = self.data[:]\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    deviations: deviations
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '31250.0'
    time: baseline_time
  states:
    _io_cache: '(''Filter Outliers'', ''filter_outlier_block'', [(''samp_rate'', ''31250.0''),
      (''time'', ''30''), (''deviations'', ''10'')], [(''0'', ''float'', 1)], [(''0'',
      ''float'', 1)], ''\n    Filter Outliers Block - passes data points through after
      replacing outliers with median value.\n\n    Parameters\n    ----------\n\n    samp_rate
      : float, int\n        Sample rate of incoming samples. Samples per second.\n\n    time
      : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations
      : int, float\n        Number of deviations of variation from median that determines
      outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate
      median and median absolute deviation. Outliers are points a number of deviations
      away from median (determined by parameter `deviation`). Size of buffer is numsamps
      where numsamps is the number of samples \n    '', [''deviations'', ''samp_rate'',
      ''time''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 2212.0]
    rotation: 0
    state: true
- name: epy_block_0_0_14_12
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nimport scipy\nfrom scipy import stats\n\nclass filter_outlier_block(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"\n    Filter Outliers Block - passes data points through after replacing outliers\
      \ with median value.\n\n    Parameters\n    ----------\n\n    samp_rate : float,\
      \ int\n        Sample rate of incoming samples. Samples per second.\n\n    time\
      \ : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations\
      \ : int, float\n        Number of deviations of variation from median that determines\
      \ outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate\
      \ median and median absolute deviation. Outliers are points a number of deviations\
      \ away from median (determined by parameter `deviation`). Size of buffer is\
      \ numsamps where numsamps is the number of samples \n    \"\"\"\n\n    def __init__(self,\
      \ samp_rate=(1000000/32), time=30, deviations=10):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Filter Outliers',   # will show up in\
      \ GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        self.samp_rate = samp_rate\n        self.time = time\n \
      \       self.deviations = deviations\n\n        self.buffer = np.array([], dtype=np.float32)\
      \   # buffer to contain data\n        self.data = np.array([], dtype=np.float32)\
      \  # data to pass out\n        self.median = 0.    # median of data in buffer\n\
      \        self.mad = 0.   # median absolute deviation of data in buffer\n   \
      \     \n\n    def work(self, input_items, output_items):\n        numsamps =\
      \ self.samp_rate * self.time   # number of samples to store in buffer\n    \
      \    if self.buffer.size < numsamps:\n            self.buffer = np.append(self.buffer,\
      \ input_items[0])\n        else:\n            self.buffer = np.append(np.delete(self.buffer,\
      \ range(input_items[0].size)), input_items[0][:])\n        if self.buffer.size\
      \ > numsamps:\n            self.buffer = np.delete(self.buffer, range(self.buffer.size\
      \ - numsamps))\n\n        self.data = input_items[0].copy()\n\n        self.median\
      \ = np.median(self.buffer)\n        self.mad = scipy.stats.median_abs_deviation(self.buffer)\n\
      \n        self.data[np.where(np.absolute(self.data - self.median) > (self.deviations\
      \ * self.mad))] = self.median\n        \n        output_items[0][:] = self.data[:]\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    deviations: deviations
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '31250.0'
    time: baseline_time
  states:
    _io_cache: '(''Filter Outliers'', ''filter_outlier_block'', [(''samp_rate'', ''31250.0''),
      (''time'', ''30''), (''deviations'', ''10'')], [(''0'', ''float'', 1)], [(''0'',
      ''float'', 1)], ''\n    Filter Outliers Block - passes data points through after
      replacing outliers with median value.\n\n    Parameters\n    ----------\n\n    samp_rate
      : float, int\n        Sample rate of incoming samples. Samples per second.\n\n    time
      : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations
      : int, float\n        Number of deviations of variation from median that determines
      outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate
      median and median absolute deviation. Outliers are points a number of deviations
      away from median (determined by parameter `deviation`). Size of buffer is numsamps
      where numsamps is the number of samples \n    '', [''deviations'', ''samp_rate'',
      ''time''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 2268.0]
    rotation: 0
    state: true
- name: epy_block_0_0_14_13
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nimport scipy\nfrom scipy import stats\n\nclass filter_outlier_block(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"\n    Filter Outliers Block - passes data points through after replacing outliers\
      \ with median value.\n\n    Parameters\n    ----------\n\n    samp_rate : float,\
      \ int\n        Sample rate of incoming samples. Samples per second.\n\n    time\
      \ : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations\
      \ : int, float\n        Number of deviations of variation from median that determines\
      \ outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate\
      \ median and median absolute deviation. Outliers are points a number of deviations\
      \ away from median (determined by parameter `deviation`). Size of buffer is\
      \ numsamps where numsamps is the number of samples \n    \"\"\"\n\n    def __init__(self,\
      \ samp_rate=(1000000/32), time=30, deviations=10):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Filter Outliers',   # will show up in\
      \ GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        self.samp_rate = samp_rate\n        self.time = time\n \
      \       self.deviations = deviations\n\n        self.buffer = np.array([], dtype=np.float32)\
      \   # buffer to contain data\n        self.data = np.array([], dtype=np.float32)\
      \  # data to pass out\n        self.median = 0.    # median of data in buffer\n\
      \        self.mad = 0.   # median absolute deviation of data in buffer\n   \
      \     \n\n    def work(self, input_items, output_items):\n        numsamps =\
      \ self.samp_rate * self.time   # number of samples to store in buffer\n    \
      \    if self.buffer.size < numsamps:\n            self.buffer = np.append(self.buffer,\
      \ input_items[0])\n        else:\n            self.buffer = np.append(np.delete(self.buffer,\
      \ range(input_items[0].size)), input_items[0][:])\n        if self.buffer.size\
      \ > numsamps:\n            self.buffer = np.delete(self.buffer, range(self.buffer.size\
      \ - numsamps))\n\n        self.data = input_items[0].copy()\n\n        self.median\
      \ = np.median(self.buffer)\n        self.mad = scipy.stats.median_abs_deviation(self.buffer)\n\
      \n        self.data[np.where(np.absolute(self.data - self.median) > (self.deviations\
      \ * self.mad))] = self.median\n        \n        output_items[0][:] = self.data[:]\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    deviations: deviations
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '31250.0'
    time: baseline_time
  states:
    _io_cache: '(''Filter Outliers'', ''filter_outlier_block'', [(''samp_rate'', ''31250.0''),
      (''time'', ''30''), (''deviations'', ''10'')], [(''0'', ''float'', 1)], [(''0'',
      ''float'', 1)], ''\n    Filter Outliers Block - passes data points through after
      replacing outliers with median value.\n\n    Parameters\n    ----------\n\n    samp_rate
      : float, int\n        Sample rate of incoming samples. Samples per second.\n\n    time
      : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations
      : int, float\n        Number of deviations of variation from median that determines
      outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate
      median and median absolute deviation. Outliers are points a number of deviations
      away from median (determined by parameter `deviation`). Size of buffer is numsamps
      where numsamps is the number of samples \n    '', [''deviations'', ''samp_rate'',
      ''time''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 2324.0]
    rotation: 0
    state: true
- name: epy_block_0_0_14_14
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nimport scipy\nfrom scipy import stats\n\nclass filter_outlier_block(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"\n    Filter Outliers Block - passes data points through after replacing outliers\
      \ with median value.\n\n    Parameters\n    ----------\n\n    samp_rate : float,\
      \ int\n        Sample rate of incoming samples. Samples per second.\n\n    time\
      \ : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations\
      \ : int, float\n        Number of deviations of variation from median that determines\
      \ outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate\
      \ median and median absolute deviation. Outliers are points a number of deviations\
      \ away from median (determined by parameter `deviation`). Size of buffer is\
      \ numsamps where numsamps is the number of samples \n    \"\"\"\n\n    def __init__(self,\
      \ samp_rate=(1000000/32), time=30, deviations=10):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Filter Outliers',   # will show up in\
      \ GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        self.samp_rate = samp_rate\n        self.time = time\n \
      \       self.deviations = deviations\n\n        self.buffer = np.array([], dtype=np.float32)\
      \   # buffer to contain data\n        self.data = np.array([], dtype=np.float32)\
      \  # data to pass out\n        self.median = 0.    # median of data in buffer\n\
      \        self.mad = 0.   # median absolute deviation of data in buffer\n   \
      \     \n\n    def work(self, input_items, output_items):\n        numsamps =\
      \ self.samp_rate * self.time   # number of samples to store in buffer\n    \
      \    if self.buffer.size < numsamps:\n            self.buffer = np.append(self.buffer,\
      \ input_items[0])\n        else:\n            self.buffer = np.append(np.delete(self.buffer,\
      \ range(input_items[0].size)), input_items[0][:])\n        if self.buffer.size\
      \ > numsamps:\n            self.buffer = np.delete(self.buffer, range(self.buffer.size\
      \ - numsamps))\n\n        self.data = input_items[0].copy()\n\n        self.median\
      \ = np.median(self.buffer)\n        self.mad = scipy.stats.median_abs_deviation(self.buffer)\n\
      \n        self.data[np.where(np.absolute(self.data - self.median) > (self.deviations\
      \ * self.mad))] = self.median\n        \n        output_items[0][:] = self.data[:]\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    deviations: deviations
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '31250.0'
    time: baseline_time
  states:
    _io_cache: '(''Filter Outliers'', ''filter_outlier_block'', [(''samp_rate'', ''31250.0''),
      (''time'', ''30''), (''deviations'', ''10'')], [(''0'', ''float'', 1)], [(''0'',
      ''float'', 1)], ''\n    Filter Outliers Block - passes data points through after
      replacing outliers with median value.\n\n    Parameters\n    ----------\n\n    samp_rate
      : float, int\n        Sample rate of incoming samples. Samples per second.\n\n    time
      : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations
      : int, float\n        Number of deviations of variation from median that determines
      outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate
      median and median absolute deviation. Outliers are points a number of deviations
      away from median (determined by parameter `deviation`). Size of buffer is numsamps
      where numsamps is the number of samples \n    '', [''deviations'', ''samp_rate'',
      ''time''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 2380.0]
    rotation: 0
    state: true
- name: epy_block_0_0_14_2
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nimport scipy\nfrom scipy import stats\n\nclass filter_outlier_block(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"\n    Filter Outliers Block - passes data points through after replacing outliers\
      \ with median value.\n\n    Parameters\n    ----------\n\n    samp_rate : float,\
      \ int\n        Sample rate of incoming samples. Samples per second.\n\n    time\
      \ : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations\
      \ : int, float\n        Number of deviations of variation from median that determines\
      \ outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate\
      \ median and median absolute deviation. Outliers are points a number of deviations\
      \ away from median (determined by parameter `deviation`). Size of buffer is\
      \ numsamps where numsamps is the number of samples \n    \"\"\"\n\n    def __init__(self,\
      \ samp_rate=(1000000/32), time=30, deviations=10):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Filter Outliers',   # will show up in\
      \ GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        self.samp_rate = samp_rate\n        self.time = time\n \
      \       self.deviations = deviations\n\n        self.buffer = np.array([], dtype=np.float32)\
      \   # buffer to contain data\n        self.data = np.array([], dtype=np.float32)\
      \  # data to pass out\n        self.median = 0.    # median of data in buffer\n\
      \        self.mad = 0.   # median absolute deviation of data in buffer\n   \
      \     \n\n    def work(self, input_items, output_items):\n        numsamps =\
      \ self.samp_rate * self.time   # number of samples to store in buffer\n    \
      \    if self.buffer.size < numsamps:\n            self.buffer = np.append(self.buffer,\
      \ input_items[0])\n        else:\n            self.buffer = np.append(np.delete(self.buffer,\
      \ range(input_items[0].size)), input_items[0][:])\n        if self.buffer.size\
      \ > numsamps:\n            self.buffer = np.delete(self.buffer, range(self.buffer.size\
      \ - numsamps))\n\n        self.data = input_items[0].copy()\n\n        self.median\
      \ = np.median(self.buffer)\n        self.mad = scipy.stats.median_abs_deviation(self.buffer)\n\
      \n        self.data[np.where(np.absolute(self.data - self.median) > (self.deviations\
      \ * self.mad))] = self.median\n        \n        output_items[0][:] = self.data[:]\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    deviations: deviations
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '31250.0'
    time: baseline_time
  states:
    _io_cache: '(''Filter Outliers'', ''filter_outlier_block'', [(''samp_rate'', ''31250.0''),
      (''time'', ''30''), (''deviations'', ''10'')], [(''0'', ''float'', 1)], [(''0'',
      ''float'', 1)], ''\n    Filter Outliers Block - passes data points through after
      replacing outliers with median value.\n\n    Parameters\n    ----------\n\n    samp_rate
      : float, int\n        Sample rate of incoming samples. Samples per second.\n\n    time
      : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations
      : int, float\n        Number of deviations of variation from median that determines
      outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate
      median and median absolute deviation. Outliers are points a number of deviations
      away from median (determined by parameter `deviation`). Size of buffer is numsamps
      where numsamps is the number of samples \n    '', [''deviations'', ''samp_rate'',
      ''time''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 1708.0]
    rotation: 0
    state: true
- name: epy_block_0_0_14_3
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nimport scipy\nfrom scipy import stats\n\nclass filter_outlier_block(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"\n    Filter Outliers Block - passes data points through after replacing outliers\
      \ with median value.\n\n    Parameters\n    ----------\n\n    samp_rate : float,\
      \ int\n        Sample rate of incoming samples. Samples per second.\n\n    time\
      \ : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations\
      \ : int, float\n        Number of deviations of variation from median that determines\
      \ outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate\
      \ median and median absolute deviation. Outliers are points a number of deviations\
      \ away from median (determined by parameter `deviation`). Size of buffer is\
      \ numsamps where numsamps is the number of samples \n    \"\"\"\n\n    def __init__(self,\
      \ samp_rate=(1000000/32), time=30, deviations=10):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Filter Outliers',   # will show up in\
      \ GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        self.samp_rate = samp_rate\n        self.time = time\n \
      \       self.deviations = deviations\n\n        self.buffer = np.array([], dtype=np.float32)\
      \   # buffer to contain data\n        self.data = np.array([], dtype=np.float32)\
      \  # data to pass out\n        self.median = 0.    # median of data in buffer\n\
      \        self.mad = 0.   # median absolute deviation of data in buffer\n   \
      \     \n\n    def work(self, input_items, output_items):\n        numsamps =\
      \ self.samp_rate * self.time   # number of samples to store in buffer\n    \
      \    if self.buffer.size < numsamps:\n            self.buffer = np.append(self.buffer,\
      \ input_items[0])\n        else:\n            self.buffer = np.append(np.delete(self.buffer,\
      \ range(input_items[0].size)), input_items[0][:])\n        if self.buffer.size\
      \ > numsamps:\n            self.buffer = np.delete(self.buffer, range(self.buffer.size\
      \ - numsamps))\n\n        self.data = input_items[0].copy()\n\n        self.median\
      \ = np.median(self.buffer)\n        self.mad = scipy.stats.median_abs_deviation(self.buffer)\n\
      \n        self.data[np.where(np.absolute(self.data - self.median) > (self.deviations\
      \ * self.mad))] = self.median\n        \n        output_items[0][:] = self.data[:]\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    deviations: deviations
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '31250.0'
    time: baseline_time
  states:
    _io_cache: '(''Filter Outliers'', ''filter_outlier_block'', [(''samp_rate'', ''31250.0''),
      (''time'', ''30''), (''deviations'', ''10'')], [(''0'', ''float'', 1)], [(''0'',
      ''float'', 1)], ''\n    Filter Outliers Block - passes data points through after
      replacing outliers with median value.\n\n    Parameters\n    ----------\n\n    samp_rate
      : float, int\n        Sample rate of incoming samples. Samples per second.\n\n    time
      : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations
      : int, float\n        Number of deviations of variation from median that determines
      outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate
      median and median absolute deviation. Outliers are points a number of deviations
      away from median (determined by parameter `deviation`). Size of buffer is numsamps
      where numsamps is the number of samples \n    '', [''deviations'', ''samp_rate'',
      ''time''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 1764.0]
    rotation: 0
    state: true
- name: epy_block_0_0_14_4
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nimport scipy\nfrom scipy import stats\n\nclass filter_outlier_block(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"\n    Filter Outliers Block - passes data points through after replacing outliers\
      \ with median value.\n\n    Parameters\n    ----------\n\n    samp_rate : float,\
      \ int\n        Sample rate of incoming samples. Samples per second.\n\n    time\
      \ : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations\
      \ : int, float\n        Number of deviations of variation from median that determines\
      \ outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate\
      \ median and median absolute deviation. Outliers are points a number of deviations\
      \ away from median (determined by parameter `deviation`). Size of buffer is\
      \ numsamps where numsamps is the number of samples \n    \"\"\"\n\n    def __init__(self,\
      \ samp_rate=(1000000/32), time=30, deviations=10):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Filter Outliers',   # will show up in\
      \ GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        self.samp_rate = samp_rate\n        self.time = time\n \
      \       self.deviations = deviations\n\n        self.buffer = np.array([], dtype=np.float32)\
      \   # buffer to contain data\n        self.data = np.array([], dtype=np.float32)\
      \  # data to pass out\n        self.median = 0.    # median of data in buffer\n\
      \        self.mad = 0.   # median absolute deviation of data in buffer\n   \
      \     \n\n    def work(self, input_items, output_items):\n        numsamps =\
      \ self.samp_rate * self.time   # number of samples to store in buffer\n    \
      \    if self.buffer.size < numsamps:\n            self.buffer = np.append(self.buffer,\
      \ input_items[0])\n        else:\n            self.buffer = np.append(np.delete(self.buffer,\
      \ range(input_items[0].size)), input_items[0][:])\n        if self.buffer.size\
      \ > numsamps:\n            self.buffer = np.delete(self.buffer, range(self.buffer.size\
      \ - numsamps))\n\n        self.data = input_items[0].copy()\n\n        self.median\
      \ = np.median(self.buffer)\n        self.mad = scipy.stats.median_abs_deviation(self.buffer)\n\
      \n        self.data[np.where(np.absolute(self.data - self.median) > (self.deviations\
      \ * self.mad))] = self.median\n        \n        output_items[0][:] = self.data[:]\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    deviations: deviations
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '31250.0'
    time: baseline_time
  states:
    _io_cache: '(''Filter Outliers'', ''filter_outlier_block'', [(''samp_rate'', ''31250.0''),
      (''time'', ''30''), (''deviations'', ''10'')], [(''0'', ''float'', 1)], [(''0'',
      ''float'', 1)], ''\n    Filter Outliers Block - passes data points through after
      replacing outliers with median value.\n\n    Parameters\n    ----------\n\n    samp_rate
      : float, int\n        Sample rate of incoming samples. Samples per second.\n\n    time
      : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations
      : int, float\n        Number of deviations of variation from median that determines
      outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate
      median and median absolute deviation. Outliers are points a number of deviations
      away from median (determined by parameter `deviation`). Size of buffer is numsamps
      where numsamps is the number of samples \n    '', [''deviations'', ''samp_rate'',
      ''time''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 1820.0]
    rotation: 0
    state: true
- name: epy_block_0_0_14_5
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nimport scipy\nfrom scipy import stats\n\nclass filter_outlier_block(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"\n    Filter Outliers Block - passes data points through after replacing outliers\
      \ with median value.\n\n    Parameters\n    ----------\n\n    samp_rate : float,\
      \ int\n        Sample rate of incoming samples. Samples per second.\n\n    time\
      \ : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations\
      \ : int, float\n        Number of deviations of variation from median that determines\
      \ outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate\
      \ median and median absolute deviation. Outliers are points a number of deviations\
      \ away from median (determined by parameter `deviation`). Size of buffer is\
      \ numsamps where numsamps is the number of samples \n    \"\"\"\n\n    def __init__(self,\
      \ samp_rate=(1000000/32), time=30, deviations=10):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Filter Outliers',   # will show up in\
      \ GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        self.samp_rate = samp_rate\n        self.time = time\n \
      \       self.deviations = deviations\n\n        self.buffer = np.array([], dtype=np.float32)\
      \   # buffer to contain data\n        self.data = np.array([], dtype=np.float32)\
      \  # data to pass out\n        self.median = 0.    # median of data in buffer\n\
      \        self.mad = 0.   # median absolute deviation of data in buffer\n   \
      \     \n\n    def work(self, input_items, output_items):\n        numsamps =\
      \ self.samp_rate * self.time   # number of samples to store in buffer\n    \
      \    if self.buffer.size < numsamps:\n            self.buffer = np.append(self.buffer,\
      \ input_items[0])\n        else:\n            self.buffer = np.append(np.delete(self.buffer,\
      \ range(input_items[0].size)), input_items[0][:])\n        if self.buffer.size\
      \ > numsamps:\n            self.buffer = np.delete(self.buffer, range(self.buffer.size\
      \ - numsamps))\n\n        self.data = input_items[0].copy()\n\n        self.median\
      \ = np.median(self.buffer)\n        self.mad = scipy.stats.median_abs_deviation(self.buffer)\n\
      \n        self.data[np.where(np.absolute(self.data - self.median) > (self.deviations\
      \ * self.mad))] = self.median\n        \n        output_items[0][:] = self.data[:]\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    deviations: deviations
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '31250.0'
    time: baseline_time
  states:
    _io_cache: '(''Filter Outliers'', ''filter_outlier_block'', [(''samp_rate'', ''31250.0''),
      (''time'', ''30''), (''deviations'', ''10'')], [(''0'', ''float'', 1)], [(''0'',
      ''float'', 1)], ''\n    Filter Outliers Block - passes data points through after
      replacing outliers with median value.\n\n    Parameters\n    ----------\n\n    samp_rate
      : float, int\n        Sample rate of incoming samples. Samples per second.\n\n    time
      : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations
      : int, float\n        Number of deviations of variation from median that determines
      outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate
      median and median absolute deviation. Outliers are points a number of deviations
      away from median (determined by parameter `deviation`). Size of buffer is numsamps
      where numsamps is the number of samples \n    '', [''deviations'', ''samp_rate'',
      ''time''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 1876.0]
    rotation: 0
    state: true
- name: epy_block_0_0_14_6
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nimport scipy\nfrom scipy import stats\n\nclass filter_outlier_block(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"\n    Filter Outliers Block - passes data points through after replacing outliers\
      \ with median value.\n\n    Parameters\n    ----------\n\n    samp_rate : float,\
      \ int\n        Sample rate of incoming samples. Samples per second.\n\n    time\
      \ : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations\
      \ : int, float\n        Number of deviations of variation from median that determines\
      \ outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate\
      \ median and median absolute deviation. Outliers are points a number of deviations\
      \ away from median (determined by parameter `deviation`). Size of buffer is\
      \ numsamps where numsamps is the number of samples \n    \"\"\"\n\n    def __init__(self,\
      \ samp_rate=(1000000/32), time=30, deviations=10):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Filter Outliers',   # will show up in\
      \ GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        self.samp_rate = samp_rate\n        self.time = time\n \
      \       self.deviations = deviations\n\n        self.buffer = np.array([], dtype=np.float32)\
      \   # buffer to contain data\n        self.data = np.array([], dtype=np.float32)\
      \  # data to pass out\n        self.median = 0.    # median of data in buffer\n\
      \        self.mad = 0.   # median absolute deviation of data in buffer\n   \
      \     \n\n    def work(self, input_items, output_items):\n        numsamps =\
      \ self.samp_rate * self.time   # number of samples to store in buffer\n    \
      \    if self.buffer.size < numsamps:\n            self.buffer = np.append(self.buffer,\
      \ input_items[0])\n        else:\n            self.buffer = np.append(np.delete(self.buffer,\
      \ range(input_items[0].size)), input_items[0][:])\n        if self.buffer.size\
      \ > numsamps:\n            self.buffer = np.delete(self.buffer, range(self.buffer.size\
      \ - numsamps))\n\n        self.data = input_items[0].copy()\n\n        self.median\
      \ = np.median(self.buffer)\n        self.mad = scipy.stats.median_abs_deviation(self.buffer)\n\
      \n        self.data[np.where(np.absolute(self.data - self.median) > (self.deviations\
      \ * self.mad))] = self.median\n        \n        output_items[0][:] = self.data[:]\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    deviations: deviations
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '31250.0'
    time: baseline_time
  states:
    _io_cache: '(''Filter Outliers'', ''filter_outlier_block'', [(''samp_rate'', ''31250.0''),
      (''time'', ''30''), (''deviations'', ''10'')], [(''0'', ''float'', 1)], [(''0'',
      ''float'', 1)], ''\n    Filter Outliers Block - passes data points through after
      replacing outliers with median value.\n\n    Parameters\n    ----------\n\n    samp_rate
      : float, int\n        Sample rate of incoming samples. Samples per second.\n\n    time
      : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations
      : int, float\n        Number of deviations of variation from median that determines
      outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate
      median and median absolute deviation. Outliers are points a number of deviations
      away from median (determined by parameter `deviation`). Size of buffer is numsamps
      where numsamps is the number of samples \n    '', [''deviations'', ''samp_rate'',
      ''time''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 1932.0]
    rotation: 0
    state: true
- name: epy_block_0_0_14_7
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nimport scipy\nfrom scipy import stats\n\nclass filter_outlier_block(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"\n    Filter Outliers Block - passes data points through after replacing outliers\
      \ with median value.\n\n    Parameters\n    ----------\n\n    samp_rate : float,\
      \ int\n        Sample rate of incoming samples. Samples per second.\n\n    time\
      \ : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations\
      \ : int, float\n        Number of deviations of variation from median that determines\
      \ outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate\
      \ median and median absolute deviation. Outliers are points a number of deviations\
      \ away from median (determined by parameter `deviation`). Size of buffer is\
      \ numsamps where numsamps is the number of samples \n    \"\"\"\n\n    def __init__(self,\
      \ samp_rate=(1000000/32), time=30, deviations=10):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Filter Outliers',   # will show up in\
      \ GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        self.samp_rate = samp_rate\n        self.time = time\n \
      \       self.deviations = deviations\n\n        self.buffer = np.array([], dtype=np.float32)\
      \   # buffer to contain data\n        self.data = np.array([], dtype=np.float32)\
      \  # data to pass out\n        self.median = 0.    # median of data in buffer\n\
      \        self.mad = 0.   # median absolute deviation of data in buffer\n   \
      \     \n\n    def work(self, input_items, output_items):\n        numsamps =\
      \ self.samp_rate * self.time   # number of samples to store in buffer\n    \
      \    if self.buffer.size < numsamps:\n            self.buffer = np.append(self.buffer,\
      \ input_items[0])\n        else:\n            self.buffer = np.append(np.delete(self.buffer,\
      \ range(input_items[0].size)), input_items[0][:])\n        if self.buffer.size\
      \ > numsamps:\n            self.buffer = np.delete(self.buffer, range(self.buffer.size\
      \ - numsamps))\n\n        self.data = input_items[0].copy()\n\n        self.median\
      \ = np.median(self.buffer)\n        self.mad = scipy.stats.median_abs_deviation(self.buffer)\n\
      \n        self.data[np.where(np.absolute(self.data - self.median) > (self.deviations\
      \ * self.mad))] = self.median\n        \n        output_items[0][:] = self.data[:]\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    deviations: deviations
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '31250.0'
    time: baseline_time
  states:
    _io_cache: '(''Filter Outliers'', ''filter_outlier_block'', [(''samp_rate'', ''31250.0''),
      (''time'', ''30''), (''deviations'', ''10'')], [(''0'', ''float'', 1)], [(''0'',
      ''float'', 1)], ''\n    Filter Outliers Block - passes data points through after
      replacing outliers with median value.\n\n    Parameters\n    ----------\n\n    samp_rate
      : float, int\n        Sample rate of incoming samples. Samples per second.\n\n    time
      : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations
      : int, float\n        Number of deviations of variation from median that determines
      outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate
      median and median absolute deviation. Outliers are points a number of deviations
      away from median (determined by parameter `deviation`). Size of buffer is numsamps
      where numsamps is the number of samples \n    '', [''deviations'', ''samp_rate'',
      ''time''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 1988.0]
    rotation: 0
    state: true
- name: epy_block_0_0_14_8
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nimport scipy\nfrom scipy import stats\n\nclass filter_outlier_block(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"\n    Filter Outliers Block - passes data points through after replacing outliers\
      \ with median value.\n\n    Parameters\n    ----------\n\n    samp_rate : float,\
      \ int\n        Sample rate of incoming samples. Samples per second.\n\n    time\
      \ : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations\
      \ : int, float\n        Number of deviations of variation from median that determines\
      \ outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate\
      \ median and median absolute deviation. Outliers are points a number of deviations\
      \ away from median (determined by parameter `deviation`). Size of buffer is\
      \ numsamps where numsamps is the number of samples \n    \"\"\"\n\n    def __init__(self,\
      \ samp_rate=(1000000/32), time=30, deviations=10):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Filter Outliers',   # will show up in\
      \ GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        self.samp_rate = samp_rate\n        self.time = time\n \
      \       self.deviations = deviations\n\n        self.buffer = np.array([], dtype=np.float32)\
      \   # buffer to contain data\n        self.data = np.array([], dtype=np.float32)\
      \  # data to pass out\n        self.median = 0.    # median of data in buffer\n\
      \        self.mad = 0.   # median absolute deviation of data in buffer\n   \
      \     \n\n    def work(self, input_items, output_items):\n        numsamps =\
      \ self.samp_rate * self.time   # number of samples to store in buffer\n    \
      \    if self.buffer.size < numsamps:\n            self.buffer = np.append(self.buffer,\
      \ input_items[0])\n        else:\n            self.buffer = np.append(np.delete(self.buffer,\
      \ range(input_items[0].size)), input_items[0][:])\n        if self.buffer.size\
      \ > numsamps:\n            self.buffer = np.delete(self.buffer, range(self.buffer.size\
      \ - numsamps))\n\n        self.data = input_items[0].copy()\n\n        self.median\
      \ = np.median(self.buffer)\n        self.mad = scipy.stats.median_abs_deviation(self.buffer)\n\
      \n        self.data[np.where(np.absolute(self.data - self.median) > (self.deviations\
      \ * self.mad))] = self.median\n        \n        output_items[0][:] = self.data[:]\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    deviations: deviations
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '31250.0'
    time: baseline_time
  states:
    _io_cache: '(''Filter Outliers'', ''filter_outlier_block'', [(''samp_rate'', ''31250.0''),
      (''time'', ''30''), (''deviations'', ''10'')], [(''0'', ''float'', 1)], [(''0'',
      ''float'', 1)], ''\n    Filter Outliers Block - passes data points through after
      replacing outliers with median value.\n\n    Parameters\n    ----------\n\n    samp_rate
      : float, int\n        Sample rate of incoming samples. Samples per second.\n\n    time
      : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations
      : int, float\n        Number of deviations of variation from median that determines
      outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate
      median and median absolute deviation. Outliers are points a number of deviations
      away from median (determined by parameter `deviation`). Size of buffer is numsamps
      where numsamps is the number of samples \n    '', [''deviations'', ''samp_rate'',
      ''time''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 2044.0]
    rotation: 0
    state: true
- name: epy_block_0_0_14_9
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nimport scipy\nfrom scipy import stats\n\nclass filter_outlier_block(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"\n    Filter Outliers Block - passes data points through after replacing outliers\
      \ with median value.\n\n    Parameters\n    ----------\n\n    samp_rate : float,\
      \ int\n        Sample rate of incoming samples. Samples per second.\n\n    time\
      \ : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations\
      \ : int, float\n        Number of deviations of variation from median that determines\
      \ outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate\
      \ median and median absolute deviation. Outliers are points a number of deviations\
      \ away from median (determined by parameter `deviation`). Size of buffer is\
      \ numsamps where numsamps is the number of samples \n    \"\"\"\n\n    def __init__(self,\
      \ samp_rate=(1000000/32), time=30, deviations=10):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Filter Outliers',   # will show up in\
      \ GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        self.samp_rate = samp_rate\n        self.time = time\n \
      \       self.deviations = deviations\n\n        self.buffer = np.array([], dtype=np.float32)\
      \   # buffer to contain data\n        self.data = np.array([], dtype=np.float32)\
      \  # data to pass out\n        self.median = 0.    # median of data in buffer\n\
      \        self.mad = 0.   # median absolute deviation of data in buffer\n   \
      \     \n\n    def work(self, input_items, output_items):\n        numsamps =\
      \ self.samp_rate * self.time   # number of samples to store in buffer\n    \
      \    if self.buffer.size < numsamps:\n            self.buffer = np.append(self.buffer,\
      \ input_items[0])\n        else:\n            self.buffer = np.append(np.delete(self.buffer,\
      \ range(input_items[0].size)), input_items[0][:])\n        if self.buffer.size\
      \ > numsamps:\n            self.buffer = np.delete(self.buffer, range(self.buffer.size\
      \ - numsamps))\n\n        self.data = input_items[0].copy()\n\n        self.median\
      \ = np.median(self.buffer)\n        self.mad = scipy.stats.median_abs_deviation(self.buffer)\n\
      \n        self.data[np.where(np.absolute(self.data - self.median) > (self.deviations\
      \ * self.mad))] = self.median\n        \n        output_items[0][:] = self.data[:]\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    deviations: deviations
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '31250.0'
    time: baseline_time
  states:
    _io_cache: '(''Filter Outliers'', ''filter_outlier_block'', [(''samp_rate'', ''31250.0''),
      (''time'', ''30''), (''deviations'', ''10'')], [(''0'', ''float'', 1)], [(''0'',
      ''float'', 1)], ''\n    Filter Outliers Block - passes data points through after
      replacing outliers with median value.\n\n    Parameters\n    ----------\n\n    samp_rate
      : float, int\n        Sample rate of incoming samples. Samples per second.\n\n    time
      : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations
      : int, float\n        Number of deviations of variation from median that determines
      outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate
      median and median absolute deviation. Outliers are points a number of deviations
      away from median (determined by parameter `deviation`). Size of buffer is numsamps
      where numsamps is the number of samples \n    '', [''deviations'', ''samp_rate'',
      ''time''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 2100.0]
    rotation: 0
    state: true
- name: epy_block_0_0_15
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nimport scipy\nfrom scipy import stats\n\nclass filter_outlier_block(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"\n    Filter Outliers Block - passes data points through after replacing outliers\
      \ with median value.\n\n    Parameters\n    ----------\n\n    samp_rate : float,\
      \ int\n        Sample rate of incoming samples. Samples per second.\n\n    time\
      \ : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations\
      \ : int, float\n        Number of deviations of variation from median that determines\
      \ outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate\
      \ median and median absolute deviation. Outliers are points a number of deviations\
      \ away from median (determined by parameter `deviation`). Size of buffer is\
      \ numsamps where numsamps is the number of samples \n    \"\"\"\n\n    def __init__(self,\
      \ samp_rate=(1000000/32), time=30, deviations=10):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Filter Outliers',   # will show up in\
      \ GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        self.samp_rate = samp_rate\n        self.time = time\n \
      \       self.deviations = deviations\n\n        self.buffer = np.array([], dtype=np.float32)\
      \   # buffer to contain data\n        self.data = np.array([], dtype=np.float32)\
      \  # data to pass out\n        self.median = 0.    # median of data in buffer\n\
      \        self.mad = 0.   # median absolute deviation of data in buffer\n   \
      \     \n\n    def work(self, input_items, output_items):\n        numsamps =\
      \ self.samp_rate * self.time   # number of samples to store in buffer\n    \
      \    if self.buffer.size < numsamps:\n            self.buffer = np.append(self.buffer,\
      \ input_items[0])\n        else:\n            self.buffer = np.append(np.delete(self.buffer,\
      \ range(input_items[0].size)), input_items[0][:])\n        if self.buffer.size\
      \ > numsamps:\n            self.buffer = np.delete(self.buffer, range(self.buffer.size\
      \ - numsamps))\n\n        self.data = input_items[0].copy()\n\n        self.median\
      \ = np.median(self.buffer)\n        self.mad = scipy.stats.median_abs_deviation(self.buffer)\n\
      \n        self.data[np.where(np.absolute(self.data - self.median) > (self.deviations\
      \ * self.mad))] = self.median\n        \n        output_items[0][:] = self.data[:]\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    deviations: deviations
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '31250.0'
    time: baseline_time
  states:
    _io_cache: '(''Filter Outliers'', ''filter_outlier_block'', [(''samp_rate'', ''31250.0''),
      (''time'', ''30''), (''deviations'', ''10'')], [(''0'', ''float'', 1)], [(''0'',
      ''float'', 1)], ''\n    Filter Outliers Block - passes data points through after
      replacing outliers with median value.\n\n    Parameters\n    ----------\n\n    samp_rate
      : float, int\n        Sample rate of incoming samples. Samples per second.\n\n    time
      : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations
      : int, float\n        Number of deviations of variation from median that determines
      outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate
      median and median absolute deviation. Outliers are points a number of deviations
      away from median (determined by parameter `deviation`). Size of buffer is numsamps
      where numsamps is the number of samples \n    '', [''deviations'', ''samp_rate'',
      ''time''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 1540.0]
    rotation: 0
    state: true
- name: epy_block_0_0_2
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nimport scipy\nfrom scipy import stats\n\nclass filter_outlier_block(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"\n    Filter Outliers Block - passes data points through after replacing outliers\
      \ with median value.\n\n    Parameters\n    ----------\n\n    samp_rate : float,\
      \ int\n        Sample rate of incoming samples. Samples per second.\n\n    time\
      \ : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations\
      \ : int, float\n        Number of deviations of variation from median that determines\
      \ outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate\
      \ median and median absolute deviation. Outliers are points a number of deviations\
      \ away from median (determined by parameter `deviation`). Size of buffer is\
      \ numsamps where numsamps is the number of samples \n    \"\"\"\n\n    def __init__(self,\
      \ samp_rate=(1000000/32), time=30, deviations=10):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Filter Outliers',   # will show up in\
      \ GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        self.samp_rate = samp_rate\n        self.time = time\n \
      \       self.deviations = deviations\n\n        self.buffer = np.array([], dtype=np.float32)\
      \   # buffer to contain data\n        self.data = np.array([], dtype=np.float32)\
      \  # data to pass out\n        self.median = 0.    # median of data in buffer\n\
      \        self.mad = 0.   # median absolute deviation of data in buffer\n   \
      \     \n\n    def work(self, input_items, output_items):\n        numsamps =\
      \ self.samp_rate * self.time   # number of samples to store in buffer\n    \
      \    if self.buffer.size < numsamps:\n            self.buffer = np.append(self.buffer,\
      \ input_items[0])\n        else:\n            self.buffer = np.append(np.delete(self.buffer,\
      \ range(input_items[0].size)), input_items[0][:])\n        if self.buffer.size\
      \ > numsamps:\n            self.buffer = np.delete(self.buffer, range(self.buffer.size\
      \ - numsamps))\n\n        self.data = input_items[0].copy()\n\n        self.median\
      \ = np.median(self.buffer)\n        self.mad = scipy.stats.median_abs_deviation(self.buffer)\n\
      \n        self.data[np.where(np.absolute(self.data - self.median) > (self.deviations\
      \ * self.mad))] = self.median\n        \n        output_items[0][:] = self.data[:]\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    deviations: deviations
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '31250.0'
    time: baseline_time
  states:
    _io_cache: '(''Filter Outliers'', ''filter_outlier_block'', [(''samp_rate'', ''31250.0''),
      (''time'', ''30''), (''deviations'', ''10'')], [(''0'', ''float'', 1)], [(''0'',
      ''float'', 1)], ''\n    Filter Outliers Block - passes data points through after
      replacing outliers with median value.\n\n    Parameters\n    ----------\n\n    samp_rate
      : float, int\n        Sample rate of incoming samples. Samples per second.\n\n    time
      : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations
      : int, float\n        Number of deviations of variation from median that determines
      outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate
      median and median absolute deviation. Outliers are points a number of deviations
      away from median (determined by parameter `deviation`). Size of buffer is numsamps
      where numsamps is the number of samples \n    '', [''deviations'', ''samp_rate'',
      ''time''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 812.0]
    rotation: 0
    state: true
- name: epy_block_0_0_3
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nimport scipy\nfrom scipy import stats\n\nclass filter_outlier_block(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"\n    Filter Outliers Block - passes data points through after replacing outliers\
      \ with median value.\n\n    Parameters\n    ----------\n\n    samp_rate : float,\
      \ int\n        Sample rate of incoming samples. Samples per second.\n\n    time\
      \ : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations\
      \ : int, float\n        Number of deviations of variation from median that determines\
      \ outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate\
      \ median and median absolute deviation. Outliers are points a number of deviations\
      \ away from median (determined by parameter `deviation`). Size of buffer is\
      \ numsamps where numsamps is the number of samples \n    \"\"\"\n\n    def __init__(self,\
      \ samp_rate=(1000000/32), time=30, deviations=10):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Filter Outliers',   # will show up in\
      \ GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        self.samp_rate = samp_rate\n        self.time = time\n \
      \       self.deviations = deviations\n\n        self.buffer = np.array([], dtype=np.float32)\
      \   # buffer to contain data\n        self.data = np.array([], dtype=np.float32)\
      \  # data to pass out\n        self.median = 0.    # median of data in buffer\n\
      \        self.mad = 0.   # median absolute deviation of data in buffer\n   \
      \     \n\n    def work(self, input_items, output_items):\n        numsamps =\
      \ self.samp_rate * self.time   # number of samples to store in buffer\n    \
      \    if self.buffer.size < numsamps:\n            self.buffer = np.append(self.buffer,\
      \ input_items[0])\n        else:\n            self.buffer = np.append(np.delete(self.buffer,\
      \ range(input_items[0].size)), input_items[0][:])\n        if self.buffer.size\
      \ > numsamps:\n            self.buffer = np.delete(self.buffer, range(self.buffer.size\
      \ - numsamps))\n\n        self.data = input_items[0].copy()\n\n        self.median\
      \ = np.median(self.buffer)\n        self.mad = scipy.stats.median_abs_deviation(self.buffer)\n\
      \n        self.data[np.where(np.absolute(self.data - self.median) > (self.deviations\
      \ * self.mad))] = self.median\n        \n        output_items[0][:] = self.data[:]\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    deviations: deviations
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '31250.0'
    time: baseline_time
  states:
    _io_cache: '(''Filter Outliers'', ''filter_outlier_block'', [(''samp_rate'', ''31250.0''),
      (''time'', ''30''), (''deviations'', ''10'')], [(''0'', ''float'', 1)], [(''0'',
      ''float'', 1)], ''\n    Filter Outliers Block - passes data points through after
      replacing outliers with median value.\n\n    Parameters\n    ----------\n\n    samp_rate
      : float, int\n        Sample rate of incoming samples. Samples per second.\n\n    time
      : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations
      : int, float\n        Number of deviations of variation from median that determines
      outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate
      median and median absolute deviation. Outliers are points a number of deviations
      away from median (determined by parameter `deviation`). Size of buffer is numsamps
      where numsamps is the number of samples \n    '', [''deviations'', ''samp_rate'',
      ''time''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 868.0]
    rotation: 0
    state: true
- name: epy_block_0_0_4
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nimport scipy\nfrom scipy import stats\n\nclass filter_outlier_block(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"\n    Filter Outliers Block - passes data points through after replacing outliers\
      \ with median value.\n\n    Parameters\n    ----------\n\n    samp_rate : float,\
      \ int\n        Sample rate of incoming samples. Samples per second.\n\n    time\
      \ : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations\
      \ : int, float\n        Number of deviations of variation from median that determines\
      \ outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate\
      \ median and median absolute deviation. Outliers are points a number of deviations\
      \ away from median (determined by parameter `deviation`). Size of buffer is\
      \ numsamps where numsamps is the number of samples \n    \"\"\"\n\n    def __init__(self,\
      \ samp_rate=(1000000/32), time=30, deviations=10):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Filter Outliers',   # will show up in\
      \ GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        self.samp_rate = samp_rate\n        self.time = time\n \
      \       self.deviations = deviations\n\n        self.buffer = np.array([], dtype=np.float32)\
      \   # buffer to contain data\n        self.data = np.array([], dtype=np.float32)\
      \  # data to pass out\n        self.median = 0.    # median of data in buffer\n\
      \        self.mad = 0.   # median absolute deviation of data in buffer\n   \
      \     \n\n    def work(self, input_items, output_items):\n        numsamps =\
      \ self.samp_rate * self.time   # number of samples to store in buffer\n    \
      \    if self.buffer.size < numsamps:\n            self.buffer = np.append(self.buffer,\
      \ input_items[0])\n        else:\n            self.buffer = np.append(np.delete(self.buffer,\
      \ range(input_items[0].size)), input_items[0][:])\n        if self.buffer.size\
      \ > numsamps:\n            self.buffer = np.delete(self.buffer, range(self.buffer.size\
      \ - numsamps))\n\n        self.data = input_items[0].copy()\n\n        self.median\
      \ = np.median(self.buffer)\n        self.mad = scipy.stats.median_abs_deviation(self.buffer)\n\
      \n        self.data[np.where(np.absolute(self.data - self.median) > (self.deviations\
      \ * self.mad))] = self.median\n        \n        output_items[0][:] = self.data[:]\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    deviations: deviations
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '31250.0'
    time: baseline_time
  states:
    _io_cache: '(''Filter Outliers'', ''filter_outlier_block'', [(''samp_rate'', ''31250.0''),
      (''time'', ''30''), (''deviations'', ''10'')], [(''0'', ''float'', 1)], [(''0'',
      ''float'', 1)], ''\n    Filter Outliers Block - passes data points through after
      replacing outliers with median value.\n\n    Parameters\n    ----------\n\n    samp_rate
      : float, int\n        Sample rate of incoming samples. Samples per second.\n\n    time
      : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations
      : int, float\n        Number of deviations of variation from median that determines
      outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate
      median and median absolute deviation. Outliers are points a number of deviations
      away from median (determined by parameter `deviation`). Size of buffer is numsamps
      where numsamps is the number of samples \n    '', [''deviations'', ''samp_rate'',
      ''time''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 924.0]
    rotation: 0
    state: true
- name: epy_block_0_0_5
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nimport scipy\nfrom scipy import stats\n\nclass filter_outlier_block(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"\n    Filter Outliers Block - passes data points through after replacing outliers\
      \ with median value.\n\n    Parameters\n    ----------\n\n    samp_rate : float,\
      \ int\n        Sample rate of incoming samples. Samples per second.\n\n    time\
      \ : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations\
      \ : int, float\n        Number of deviations of variation from median that determines\
      \ outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate\
      \ median and median absolute deviation. Outliers are points a number of deviations\
      \ away from median (determined by parameter `deviation`). Size of buffer is\
      \ numsamps where numsamps is the number of samples \n    \"\"\"\n\n    def __init__(self,\
      \ samp_rate=(1000000/32), time=30, deviations=10):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Filter Outliers',   # will show up in\
      \ GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        self.samp_rate = samp_rate\n        self.time = time\n \
      \       self.deviations = deviations\n\n        self.buffer = np.array([], dtype=np.float32)\
      \   # buffer to contain data\n        self.data = np.array([], dtype=np.float32)\
      \  # data to pass out\n        self.median = 0.    # median of data in buffer\n\
      \        self.mad = 0.   # median absolute deviation of data in buffer\n   \
      \     \n\n    def work(self, input_items, output_items):\n        numsamps =\
      \ self.samp_rate * self.time   # number of samples to store in buffer\n    \
      \    if self.buffer.size < numsamps:\n            self.buffer = np.append(self.buffer,\
      \ input_items[0])\n        else:\n            self.buffer = np.append(np.delete(self.buffer,\
      \ range(input_items[0].size)), input_items[0][:])\n        if self.buffer.size\
      \ > numsamps:\n            self.buffer = np.delete(self.buffer, range(self.buffer.size\
      \ - numsamps))\n\n        self.data = input_items[0].copy()\n\n        self.median\
      \ = np.median(self.buffer)\n        self.mad = scipy.stats.median_abs_deviation(self.buffer)\n\
      \n        self.data[np.where(np.absolute(self.data - self.median) > (self.deviations\
      \ * self.mad))] = self.median\n        \n        output_items[0][:] = self.data[:]\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    deviations: deviations
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '31250.0'
    time: baseline_time
  states:
    _io_cache: '(''Filter Outliers'', ''filter_outlier_block'', [(''samp_rate'', ''31250.0''),
      (''time'', ''30''), (''deviations'', ''10'')], [(''0'', ''float'', 1)], [(''0'',
      ''float'', 1)], ''\n    Filter Outliers Block - passes data points through after
      replacing outliers with median value.\n\n    Parameters\n    ----------\n\n    samp_rate
      : float, int\n        Sample rate of incoming samples. Samples per second.\n\n    time
      : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations
      : int, float\n        Number of deviations of variation from median that determines
      outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate
      median and median absolute deviation. Outliers are points a number of deviations
      away from median (determined by parameter `deviation`). Size of buffer is numsamps
      where numsamps is the number of samples \n    '', [''deviations'', ''samp_rate'',
      ''time''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 980.0]
    rotation: 0
    state: true
- name: epy_block_0_0_6
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nimport scipy\nfrom scipy import stats\n\nclass filter_outlier_block(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"\n    Filter Outliers Block - passes data points through after replacing outliers\
      \ with median value.\n\n    Parameters\n    ----------\n\n    samp_rate : float,\
      \ int\n        Sample rate of incoming samples. Samples per second.\n\n    time\
      \ : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations\
      \ : int, float\n        Number of deviations of variation from median that determines\
      \ outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate\
      \ median and median absolute deviation. Outliers are points a number of deviations\
      \ away from median (determined by parameter `deviation`). Size of buffer is\
      \ numsamps where numsamps is the number of samples \n    \"\"\"\n\n    def __init__(self,\
      \ samp_rate=(1000000/32), time=30, deviations=10):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Filter Outliers',   # will show up in\
      \ GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        self.samp_rate = samp_rate\n        self.time = time\n \
      \       self.deviations = deviations\n\n        self.buffer = np.array([], dtype=np.float32)\
      \   # buffer to contain data\n        self.data = np.array([], dtype=np.float32)\
      \  # data to pass out\n        self.median = 0.    # median of data in buffer\n\
      \        self.mad = 0.   # median absolute deviation of data in buffer\n   \
      \     \n\n    def work(self, input_items, output_items):\n        numsamps =\
      \ self.samp_rate * self.time   # number of samples to store in buffer\n    \
      \    if self.buffer.size < numsamps:\n            self.buffer = np.append(self.buffer,\
      \ input_items[0])\n        else:\n            self.buffer = np.append(np.delete(self.buffer,\
      \ range(input_items[0].size)), input_items[0][:])\n        if self.buffer.size\
      \ > numsamps:\n            self.buffer = np.delete(self.buffer, range(self.buffer.size\
      \ - numsamps))\n\n        self.data = input_items[0].copy()\n\n        self.median\
      \ = np.median(self.buffer)\n        self.mad = scipy.stats.median_abs_deviation(self.buffer)\n\
      \n        self.data[np.where(np.absolute(self.data - self.median) > (self.deviations\
      \ * self.mad))] = self.median\n        \n        output_items[0][:] = self.data[:]\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    deviations: deviations
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '31250.0'
    time: baseline_time
  states:
    _io_cache: '(''Filter Outliers'', ''filter_outlier_block'', [(''samp_rate'', ''31250.0''),
      (''time'', ''30''), (''deviations'', ''10'')], [(''0'', ''float'', 1)], [(''0'',
      ''float'', 1)], ''\n    Filter Outliers Block - passes data points through after
      replacing outliers with median value.\n\n    Parameters\n    ----------\n\n    samp_rate
      : float, int\n        Sample rate of incoming samples. Samples per second.\n\n    time
      : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations
      : int, float\n        Number of deviations of variation from median that determines
      outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate
      median and median absolute deviation. Outliers are points a number of deviations
      away from median (determined by parameter `deviation`). Size of buffer is numsamps
      where numsamps is the number of samples \n    '', [''deviations'', ''samp_rate'',
      ''time''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 1036.0]
    rotation: 0
    state: true
- name: epy_block_0_0_7
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nimport scipy\nfrom scipy import stats\n\nclass filter_outlier_block(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"\n    Filter Outliers Block - passes data points through after replacing outliers\
      \ with median value.\n\n    Parameters\n    ----------\n\n    samp_rate : float,\
      \ int\n        Sample rate of incoming samples. Samples per second.\n\n    time\
      \ : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations\
      \ : int, float\n        Number of deviations of variation from median that determines\
      \ outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate\
      \ median and median absolute deviation. Outliers are points a number of deviations\
      \ away from median (determined by parameter `deviation`). Size of buffer is\
      \ numsamps where numsamps is the number of samples \n    \"\"\"\n\n    def __init__(self,\
      \ samp_rate=(1000000/32), time=30, deviations=10):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Filter Outliers',   # will show up in\
      \ GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        self.samp_rate = samp_rate\n        self.time = time\n \
      \       self.deviations = deviations\n\n        self.buffer = np.array([], dtype=np.float32)\
      \   # buffer to contain data\n        self.data = np.array([], dtype=np.float32)\
      \  # data to pass out\n        self.median = 0.    # median of data in buffer\n\
      \        self.mad = 0.   # median absolute deviation of data in buffer\n   \
      \     \n\n    def work(self, input_items, output_items):\n        numsamps =\
      \ self.samp_rate * self.time   # number of samples to store in buffer\n    \
      \    if self.buffer.size < numsamps:\n            self.buffer = np.append(self.buffer,\
      \ input_items[0])\n        else:\n            self.buffer = np.append(np.delete(self.buffer,\
      \ range(input_items[0].size)), input_items[0][:])\n        if self.buffer.size\
      \ > numsamps:\n            self.buffer = np.delete(self.buffer, range(self.buffer.size\
      \ - numsamps))\n\n        self.data = input_items[0].copy()\n\n        self.median\
      \ = np.median(self.buffer)\n        self.mad = scipy.stats.median_abs_deviation(self.buffer)\n\
      \n        self.data[np.where(np.absolute(self.data - self.median) > (self.deviations\
      \ * self.mad))] = self.median\n        \n        output_items[0][:] = self.data[:]\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    deviations: deviations
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '31250.0'
    time: baseline_time
  states:
    _io_cache: '(''Filter Outliers'', ''filter_outlier_block'', [(''samp_rate'', ''31250.0''),
      (''time'', ''30''), (''deviations'', ''10'')], [(''0'', ''float'', 1)], [(''0'',
      ''float'', 1)], ''\n    Filter Outliers Block - passes data points through after
      replacing outliers with median value.\n\n    Parameters\n    ----------\n\n    samp_rate
      : float, int\n        Sample rate of incoming samples. Samples per second.\n\n    time
      : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations
      : int, float\n        Number of deviations of variation from median that determines
      outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate
      median and median absolute deviation. Outliers are points a number of deviations
      away from median (determined by parameter `deviation`). Size of buffer is numsamps
      where numsamps is the number of samples \n    '', [''deviations'', ''samp_rate'',
      ''time''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 1092.0]
    rotation: 0
    state: true
- name: epy_block_0_0_8
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nimport scipy\nfrom scipy import stats\n\nclass filter_outlier_block(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"\n    Filter Outliers Block - passes data points through after replacing outliers\
      \ with median value.\n\n    Parameters\n    ----------\n\n    samp_rate : float,\
      \ int\n        Sample rate of incoming samples. Samples per second.\n\n    time\
      \ : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations\
      \ : int, float\n        Number of deviations of variation from median that determines\
      \ outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate\
      \ median and median absolute deviation. Outliers are points a number of deviations\
      \ away from median (determined by parameter `deviation`). Size of buffer is\
      \ numsamps where numsamps is the number of samples \n    \"\"\"\n\n    def __init__(self,\
      \ samp_rate=(1000000/32), time=30, deviations=10):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Filter Outliers',   # will show up in\
      \ GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        self.samp_rate = samp_rate\n        self.time = time\n \
      \       self.deviations = deviations\n\n        self.buffer = np.array([], dtype=np.float32)\
      \   # buffer to contain data\n        self.data = np.array([], dtype=np.float32)\
      \  # data to pass out\n        self.median = 0.    # median of data in buffer\n\
      \        self.mad = 0.   # median absolute deviation of data in buffer\n   \
      \     \n\n    def work(self, input_items, output_items):\n        numsamps =\
      \ self.samp_rate * self.time   # number of samples to store in buffer\n    \
      \    if self.buffer.size < numsamps:\n            self.buffer = np.append(self.buffer,\
      \ input_items[0])\n        else:\n            self.buffer = np.append(np.delete(self.buffer,\
      \ range(input_items[0].size)), input_items[0][:])\n        if self.buffer.size\
      \ > numsamps:\n            self.buffer = np.delete(self.buffer, range(self.buffer.size\
      \ - numsamps))\n\n        self.data = input_items[0].copy()\n\n        self.median\
      \ = np.median(self.buffer)\n        self.mad = scipy.stats.median_abs_deviation(self.buffer)\n\
      \n        self.data[np.where(np.absolute(self.data - self.median) > (self.deviations\
      \ * self.mad))] = self.median\n        \n        output_items[0][:] = self.data[:]\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    deviations: deviations
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '31250.0'
    time: baseline_time
  states:
    _io_cache: '(''Filter Outliers'', ''filter_outlier_block'', [(''samp_rate'', ''31250.0''),
      (''time'', ''30''), (''deviations'', ''10'')], [(''0'', ''float'', 1)], [(''0'',
      ''float'', 1)], ''\n    Filter Outliers Block - passes data points through after
      replacing outliers with median value.\n\n    Parameters\n    ----------\n\n    samp_rate
      : float, int\n        Sample rate of incoming samples. Samples per second.\n\n    time
      : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations
      : int, float\n        Number of deviations of variation from median that determines
      outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate
      median and median absolute deviation. Outliers are points a number of deviations
      away from median (determined by parameter `deviation`). Size of buffer is numsamps
      where numsamps is the number of samples \n    '', [''deviations'', ''samp_rate'',
      ''time''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 1148.0]
    rotation: 0
    state: true
- name: epy_block_0_0_9
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nimport scipy\nfrom scipy import stats\n\nclass filter_outlier_block(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"\n    Filter Outliers Block - passes data points through after replacing outliers\
      \ with median value.\n\n    Parameters\n    ----------\n\n    samp_rate : float,\
      \ int\n        Sample rate of incoming samples. Samples per second.\n\n    time\
      \ : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations\
      \ : int, float\n        Number of deviations of variation from median that determines\
      \ outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate\
      \ median and median absolute deviation. Outliers are points a number of deviations\
      \ away from median (determined by parameter `deviation`). Size of buffer is\
      \ numsamps where numsamps is the number of samples \n    \"\"\"\n\n    def __init__(self,\
      \ samp_rate=(1000000/32), time=30, deviations=10):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Filter Outliers',   # will show up in\
      \ GRC\n            in_sig=[np.float32],\n            out_sig=[np.float32]\n\
      \        )\n        self.samp_rate = samp_rate\n        self.time = time\n \
      \       self.deviations = deviations\n\n        self.buffer = np.array([], dtype=np.float32)\
      \   # buffer to contain data\n        self.data = np.array([], dtype=np.float32)\
      \  # data to pass out\n        self.median = 0.    # median of data in buffer\n\
      \        self.mad = 0.   # median absolute deviation of data in buffer\n   \
      \     \n\n    def work(self, input_items, output_items):\n        numsamps =\
      \ self.samp_rate * self.time   # number of samples to store in buffer\n    \
      \    if self.buffer.size < numsamps:\n            self.buffer = np.append(self.buffer,\
      \ input_items[0])\n        else:\n            self.buffer = np.append(np.delete(self.buffer,\
      \ range(input_items[0].size)), input_items[0][:])\n        if self.buffer.size\
      \ > numsamps:\n            self.buffer = np.delete(self.buffer, range(self.buffer.size\
      \ - numsamps))\n\n        self.data = input_items[0].copy()\n\n        self.median\
      \ = np.median(self.buffer)\n        self.mad = scipy.stats.median_abs_deviation(self.buffer)\n\
      \n        self.data[np.where(np.absolute(self.data - self.median) > (self.deviations\
      \ * self.mad))] = self.median\n        \n        output_items[0][:] = self.data[:]\n\
      \        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    deviations: deviations
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '31250.0'
    time: baseline_time
  states:
    _io_cache: '(''Filter Outliers'', ''filter_outlier_block'', [(''samp_rate'', ''31250.0''),
      (''time'', ''30''), (''deviations'', ''10'')], [(''0'', ''float'', 1)], [(''0'',
      ''float'', 1)], ''\n    Filter Outliers Block - passes data points through after
      replacing outliers with median value.\n\n    Parameters\n    ----------\n\n    samp_rate
      : float, int\n        Sample rate of incoming samples. Samples per second.\n\n    time
      : float, int\n        Amount of time to consider data. Seconds.\n\n    deviations
      : int, float\n        Number of deviations of variation from median that determines
      outlier.\n\n\n    Notes\n    -----\n\n    Uses buffer of datapoints to calculate
      median and median absolute deviation. Outliers are points a number of deviations
      away from median (determined by parameter `deviation`). Size of buffer is numsamps
      where numsamps is the number of samples \n    '', [''deviations'', ''samp_rate'',
      ''time''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 1204.0]
    rotation: 0
    state: true
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\nimport psrdynspec\n\
      from psrdynspec import fold\n\nclass fold_blk(gr.sync_block):\n    \"\"\"Block\
      \ to perform folding (without importing but still [ab]using psrdynspec)\"\"\"\
      \n\n    def __init__(self, period=0.0333924123 , samp_rate=1000000/32, integration_time=10.):\n\
      \        \"\"\"\n        Folding block - folds time series of power to find\
      \ pulsars.\n\n        Parameters\n        ----------\n\n        period : float\n\
      \            Folding period\n\n        samp_rate : float\n            Sample\
      \ rate of incoming samples\n\n        integration_time : float\n           \
      \ Number of seconds over which to integrate\n        \n        Notes\n     \
      \   -----\n        Always outputs the last calculated phase vs. power profile.\n\
      \n        After calculating, immediately begins collecting data for a new calculation.\n\
      \        \n        \"\"\"\n        gr.sync_block.__init__(\n            self,\n\
      \            name='Fold',\n            in_sig=[np.float32],\n            out_sig=[(np.float32,\
      \ 1024)]    # 1024 bins; if needing more/fewer bins, must also manually change\
      \ this\n        )\n        self.period = float(period)\n        self.samp_rate\
      \ = float(samp_rate)\n        self.integration_time = float(integration_time)\n\
      \n        self.bins = 1024\n        self.profile = np.zeros(self.bins)\n   \
      \     self.data = np.array([], dtype=np.float32)\n\n        self.fold_ts = fold.fold_ts\n\
      \n    def work(self, input_items, output_items):\n\n        # aggregate data\n\
      \        self.data = np.append(self.data, input_items[0])\n\n        # if enough\
      \ data collected\n        if self.data.size >= self.samp_rate * self.integration_time:\n\
      \            times = np.arange(self.data.size) / self.samp_rate\n          \
      \  self.profile = np.nan_to_num(self.fold_ts(self.data, times, self.period,\
      \ self.bins, True)[0])\n            self.data = np.array([], dtype=np.float32)\n\
      \n        # always output the latest computed profile\n        output_items[0][:]\
      \ = np.array([self.profile] * output_items[0].shape[0])\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    integration_time: integration_time
    maxoutbuf: '0'
    minoutbuf: '0'
    period: period
    samp_rate: samp_rate / num_channels
  states:
    _io_cache: ('Fold', 'fold_blk', [('period', '0.0333924123'), ('samp_rate', '31250.0'),
      ('integration_time', '10.0')], [('0', 'float', 1)], [('0', 'float', 1024)],
      'Block to perform folding (without importing but still [ab]using psrdynspec)',
      ['integration_time', 'period', 'samp_rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1072, 268.0]
    rotation: 0
    state: enabled
- name: epy_block_1_0
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\nimport psrdynspec\n\
      from psrdynspec import fold\n\nclass fold_blk(gr.sync_block):\n    \"\"\"Block\
      \ to perform folding (without importing but still [ab]using psrdynspec)\"\"\"\
      \n\n    def __init__(self, period=0.0333924123 , samp_rate=1000000/32, integration_time=10.):\n\
      \        \"\"\"\n        Folding block - folds time series of power to find\
      \ pulsars.\n\n        Parameters\n        ----------\n\n        period : float\n\
      \            Folding period\n\n        samp_rate : float\n            Sample\
      \ rate of incoming samples\n\n        integration_time : float\n           \
      \ Number of seconds over which to integrate\n        \n        Notes\n     \
      \   -----\n        Always outputs the last calculated phase vs. power profile.\n\
      \n        After calculating, immediately begins collecting data for a new calculation.\n\
      \        \n        \"\"\"\n        gr.sync_block.__init__(\n            self,\n\
      \            name='Fold',\n            in_sig=[np.float32],\n            out_sig=[(np.float32,\
      \ 1024)]    # 1024 bins; if needing more/fewer bins, must also manually change\
      \ this\n        )\n        self.period = float(period)\n        self.samp_rate\
      \ = float(samp_rate)\n        self.integration_time = float(integration_time)\n\
      \n        self.bins = 1024\n        self.profile = np.zeros(self.bins)\n   \
      \     self.data = np.array([], dtype=np.float32)\n\n        self.fold_ts = fold.fold_ts\n\
      \n    def work(self, input_items, output_items):\n\n        # aggregate data\n\
      \        self.data = np.append(self.data, input_items[0])\n\n        # if enough\
      \ data collected\n        if self.data.size >= self.samp_rate * self.integration_time:\n\
      \            times = np.arange(self.data.size) / self.samp_rate\n          \
      \  self.profile = np.nan_to_num(self.fold_ts(self.data, times, self.period,\
      \ self.bins, True)[0])\n            self.data = np.array([], dtype=np.float32)\n\
      \n        # always output the latest computed profile\n        output_items[0][:]\
      \ = np.array([self.profile] * output_items[0].shape[0])\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    integration_time: integration_time
    maxoutbuf: '0'
    minoutbuf: '0'
    period: period
    samp_rate: samp_rate / num_channels
  states:
    _io_cache: ('Fold', 'fold_blk', [('period', '0.0333924123'), ('samp_rate', '31250.0'),
      ('integration_time', '10.0')], [('0', 'float', 1)], [('0', 'float', 1024)],
      'Block to perform folding (without importing but still [ab]using psrdynspec)',
      ['integration_time', 'period', 'samp_rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1688, 852.0]
    rotation: 0
    state: enabled
- name: filter_taps
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: ''
    short_id: ''
    type: ''
    value: filtertools.kaiser_coeffs(num_channels)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [520, 152.0]
    rotation: 0
    state: true
- name: gr_digital_rf_digital_rf_channel_source_0
  id: gr_digital_rf_digital_rf_channel_source
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    dir: data_source
    end: ''
    gapless: 'False'
    hide_msg_port: 'True'
    maxoutbuf: '0'
    min_chunksize: '0'
    minoutbuf: '0'
    repeat: 'False'
    start: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [64, 140.0]
    rotation: 0
    state: true
- name: gr_digital_rf_digital_rf_sink_0
  id: gr_digital_rf_digital_rf_sink
  parameters:
    affinity: ''
    alias: ''
    center_freqs: '[]'
    channel0: ch0
    channel1: ch1
    channel10: ch10
    channel11: ch11
    channel12: ch12
    channel13: ch13
    channel14: ch14
    channel15: ch15
    channel16: ch16
    channel17: ch17
    channel18: ch18
    channel19: ch19
    channel2: ch2
    channel20: ch20
    channel21: ch21
    channel22: ch22
    channel23: ch23
    channel24: ch24
    channel25: ch25
    channel26: ch26
    channel27: ch27
    channel28: ch28
    channel29: ch29
    channel3: ch3
    channel30: ch30
    channel31: ch31
    channel4: ch4
    channel5: ch5
    channel6: ch6
    channel7: ch7
    channel8: ch8
    channel9: ch9
    checksum: 'False'
    comment: ''
    compression_level: '0'
    debug: 'False'
    file_cadence_ms: '1000'
    ignore_tags: 'False'
    input: f32
    is_continuous: 'True'
    marching_periods: 'True'
    metadata: '{}'
    min_chunksize: '0'
    nchan: '1'
    sample_rate_denominator: '1'
    sample_rate_numerator: int(samp_rate)
    start: ''
    stop_on_skipped: 'False'
    stop_on_time_tag: 'False'
    subdir_cadence_s: '3600'
    top_level_dir: data_sink
    uuid: ''
    vlen: bins
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2000, 264.0]
    rotation: 0
    state: true
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import mitarspysigproc.filtertools as filtertools
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [520, 112.0]
    rotation: 0
    state: true
- name: inco_dedisp
  id: epy_module
  parameters:
    alias: ''
    comment: ''
    source_code: "# this module will be imported in the into your flowgraph\n\ndef\
      \ dedisperse(center_freq, bandwidth, num_channels, channel, dm, samp_rate):\n\
      \    '''\n    Delay channel be specified amount given frequencies and dispersion\
      \ measure. Assumes standard channel mapping and even number of channels. Aligns\
      \ all channels with lowest channel (for delay purposes).\n\n    Parameters\n\
      \    ----------\n\n    center_freq : float\n        Center frequency in MHz\n\
      \n    bandwidth : float\n        Total bandwidth of signal reception in MHz\n\
      \n    num_channels : int\n        Number of channels into which bandwidth is\
      \ divided (equally)\n\n    channel : int\n        Which channel is being dedispersed\
      \ (0 is at center frequency)\n\n    dm : float\n        Dispersion measure of\
      \ pulsar\n\n    samp_rate : float\n        Sample rate of incoming samples (samples\
      \ per second)\n    '''\n\n    kdm = 4.149 * 1000    # dispersion measure constant\
      \ (converted from GHz^2 to MHz^2 and ms to s)\n\n    # find frequencies of lowest\
      \ channel and current channel\n    channel_width = bandwidth / num_channels\n\
      \    v2 = center_freq - (bandwidth/2)     # lowest frequency\n    if channel\
      \ <= num_channels/2:       # current channel\n        v1 = center_freq + (channel)*channel_width\n\
      \    else:\n        v1 = center_freq - (num_channels - channel)*channel_width\n\
      \n    # find amount of dispersion\n    time_delta = kdm * dm * ((1/(v2**2))\
      \ - (1/(v1**2)))\n    return int(time_delta * samp_rate)\n    \n"
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1280, 608.0]
    rotation: 0
    state: true
- name: integration_time
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: ''
    short_id: ''
    type: eng_float
    value: '30'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1080, 148.0]
    rotation: 0
    state: true
- name: num_channels
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: ''
    short_id: ''
    type: intx
    value: '32'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [520, 52.0]
    rotation: 0
    state: true
- name: osmosdr_source_0
  id: osmosdr_source
  parameters:
    affinity: ''
    alias: ''
    ant0: ''
    ant1: ''
    ant10: ''
    ant11: ''
    ant12: ''
    ant13: ''
    ant14: ''
    ant15: ''
    ant16: ''
    ant17: ''
    ant18: ''
    ant19: ''
    ant2: ''
    ant20: ''
    ant21: ''
    ant22: ''
    ant23: ''
    ant24: ''
    ant25: ''
    ant26: ''
    ant27: ''
    ant28: ''
    ant29: ''
    ant3: ''
    ant30: ''
    ant31: ''
    ant4: ''
    ant5: ''
    ant6: ''
    ant7: ''
    ant8: ''
    ant9: ''
    args: data_source
    bb_gain0: '20'
    bb_gain1: '20'
    bb_gain10: '20'
    bb_gain11: '20'
    bb_gain12: '20'
    bb_gain13: '20'
    bb_gain14: '20'
    bb_gain15: '20'
    bb_gain16: '20'
    bb_gain17: '20'
    bb_gain18: '20'
    bb_gain19: '20'
    bb_gain2: '20'
    bb_gain20: '20'
    bb_gain21: '20'
    bb_gain22: '20'
    bb_gain23: '20'
    bb_gain24: '20'
    bb_gain25: '20'
    bb_gain26: '20'
    bb_gain27: '20'
    bb_gain28: '20'
    bb_gain29: '20'
    bb_gain3: '20'
    bb_gain30: '20'
    bb_gain31: '20'
    bb_gain4: '20'
    bb_gain5: '20'
    bb_gain6: '20'
    bb_gain7: '20'
    bb_gain8: '20'
    bb_gain9: '20'
    bw0: '0'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    corr0: '0'
    corr1: '0'
    corr10: '0'
    corr11: '0'
    corr12: '0'
    corr13: '0'
    corr14: '0'
    corr15: '0'
    corr16: '0'
    corr17: '0'
    corr18: '0'
    corr19: '0'
    corr2: '0'
    corr20: '0'
    corr21: '0'
    corr22: '0'
    corr23: '0'
    corr24: '0'
    corr25: '0'
    corr26: '0'
    corr27: '0'
    corr28: '0'
    corr29: '0'
    corr3: '0'
    corr30: '0'
    corr31: '0'
    corr4: '0'
    corr5: '0'
    corr6: '0'
    corr7: '0'
    corr8: '0'
    corr9: '0'
    dc_offset_mode0: '0'
    dc_offset_mode1: '0'
    dc_offset_mode10: '0'
    dc_offset_mode11: '0'
    dc_offset_mode12: '0'
    dc_offset_mode13: '0'
    dc_offset_mode14: '0'
    dc_offset_mode15: '0'
    dc_offset_mode16: '0'
    dc_offset_mode17: '0'
    dc_offset_mode18: '0'
    dc_offset_mode19: '0'
    dc_offset_mode2: '0'
    dc_offset_mode20: '0'
    dc_offset_mode21: '0'
    dc_offset_mode22: '0'
    dc_offset_mode23: '0'
    dc_offset_mode24: '0'
    dc_offset_mode25: '0'
    dc_offset_mode26: '0'
    dc_offset_mode27: '0'
    dc_offset_mode28: '0'
    dc_offset_mode29: '0'
    dc_offset_mode3: '0'
    dc_offset_mode30: '0'
    dc_offset_mode31: '0'
    dc_offset_mode4: '0'
    dc_offset_mode5: '0'
    dc_offset_mode6: '0'
    dc_offset_mode7: '0'
    dc_offset_mode8: '0'
    dc_offset_mode9: '0'
    freq0: 100e6
    freq1: 100e6
    freq10: 100e6
    freq11: 100e6
    freq12: 100e6
    freq13: 100e6
    freq14: 100e6
    freq15: 100e6
    freq16: 100e6
    freq17: 100e6
    freq18: 100e6
    freq19: 100e6
    freq2: 100e6
    freq20: 100e6
    freq21: 100e6
    freq22: 100e6
    freq23: 100e6
    freq24: 100e6
    freq25: 100e6
    freq26: 100e6
    freq27: 100e6
    freq28: 100e6
    freq29: 100e6
    freq3: 100e6
    freq30: 100e6
    freq31: 100e6
    freq4: 100e6
    freq5: 100e6
    freq6: 100e6
    freq7: 100e6
    freq8: 100e6
    freq9: 100e6
    gain0: '10'
    gain1: '10'
    gain10: '10'
    gain11: '10'
    gain12: '10'
    gain13: '10'
    gain14: '10'
    gain15: '10'
    gain16: '10'
    gain17: '10'
    gain18: '10'
    gain19: '10'
    gain2: '10'
    gain20: '10'
    gain21: '10'
    gain22: '10'
    gain23: '10'
    gain24: '10'
    gain25: '10'
    gain26: '10'
    gain27: '10'
    gain28: '10'
    gain29: '10'
    gain3: '10'
    gain30: '10'
    gain31: '10'
    gain4: '10'
    gain5: '10'
    gain6: '10'
    gain7: '10'
    gain8: '10'
    gain9: '10'
    gain_mode0: 'False'
    gain_mode1: 'False'
    gain_mode10: 'False'
    gain_mode11: 'False'
    gain_mode12: 'False'
    gain_mode13: 'False'
    gain_mode14: 'False'
    gain_mode15: 'False'
    gain_mode16: 'False'
    gain_mode17: 'False'
    gain_mode18: 'False'
    gain_mode19: 'False'
    gain_mode2: 'False'
    gain_mode20: 'False'
    gain_mode21: 'False'
    gain_mode22: 'False'
    gain_mode23: 'False'
    gain_mode24: 'False'
    gain_mode25: 'False'
    gain_mode26: 'False'
    gain_mode27: 'False'
    gain_mode28: 'False'
    gain_mode29: 'False'
    gain_mode3: 'False'
    gain_mode30: 'False'
    gain_mode31: 'False'
    gain_mode4: 'False'
    gain_mode5: 'False'
    gain_mode6: 'False'
    gain_mode7: 'False'
    gain_mode8: 'False'
    gain_mode9: 'False'
    if_gain0: '20'
    if_gain1: '20'
    if_gain10: '20'
    if_gain11: '20'
    if_gain12: '20'
    if_gain13: '20'
    if_gain14: '20'
    if_gain15: '20'
    if_gain16: '20'
    if_gain17: '20'
    if_gain18: '20'
    if_gain19: '20'
    if_gain2: '20'
    if_gain20: '20'
    if_gain21: '20'
    if_gain22: '20'
    if_gain23: '20'
    if_gain24: '20'
    if_gain25: '20'
    if_gain26: '20'
    if_gain27: '20'
    if_gain28: '20'
    if_gain29: '20'
    if_gain3: '20'
    if_gain30: '20'
    if_gain31: '20'
    if_gain4: '20'
    if_gain5: '20'
    if_gain6: '20'
    if_gain7: '20'
    if_gain8: '20'
    if_gain9: '20'
    iq_balance_mode0: '0'
    iq_balance_mode1: '0'
    iq_balance_mode10: '0'
    iq_balance_mode11: '0'
    iq_balance_mode12: '0'
    iq_balance_mode13: '0'
    iq_balance_mode14: '0'
    iq_balance_mode15: '0'
    iq_balance_mode16: '0'
    iq_balance_mode17: '0'
    iq_balance_mode18: '0'
    iq_balance_mode19: '0'
    iq_balance_mode2: '0'
    iq_balance_mode20: '0'
    iq_balance_mode21: '0'
    iq_balance_mode22: '0'
    iq_balance_mode23: '0'
    iq_balance_mode24: '0'
    iq_balance_mode25: '0'
    iq_balance_mode26: '0'
    iq_balance_mode27: '0'
    iq_balance_mode28: '0'
    iq_balance_mode29: '0'
    iq_balance_mode3: '0'
    iq_balance_mode30: '0'
    iq_balance_mode31: '0'
    iq_balance_mode4: '0'
    iq_balance_mode5: '0'
    iq_balance_mode6: '0'
    iq_balance_mode7: '0'
    iq_balance_mode8: '0'
    iq_balance_mode9: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    sample_rate: samp_rate
    sync: sync
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 284.0]
    rotation: 0
    state: true
- name: output_selector
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: ''
    short_id: ''
    type: intx
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1696, 196.0]
    rotation: 0
    state: true
- name: period
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: ''
    short_id: ''
    type: eng_float
    value: '0.0333924123 '
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1088, 204.0]
    rotation: 0
    state: true
- name: pfb_block_selector
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: ''
    short_id: ''
    type: intx
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [520, 204.0]
    rotation: 0
    state: true
- name: pfb_channelizer_ccf_0
  id: pfb_channelizer_ccf
  parameters:
    affinity: ''
    alias: ''
    atten: '100'
    bus_conns: '[[0,],]'
    ch_map: '[]'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    nchans: '32'
    osr: '1.0'
    samp_delay: '0'
    taps: filter_taps
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [624, 1044.0]
    rotation: 0
    state: true
- name: pfb_decimator_ccf_0
  id: pfb_decimator_ccf
  parameters:
    affinity: ''
    alias: ''
    atten: '100'
    channel: '0'
    comment: ''
    decim: num_channels
    fft_filts: 'True'
    fft_rot: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_delay: '0'
    taps: filter_taps
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [656, 264.0]
    rotation: 0
    state: true
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: '1024'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2000, 412.0]
    rotation: 0
    state: true
- name: qtgui_vector_sink_f_0
  id: qtgui_vector_sink_f
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    grid: 'False'
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '1'
    ref_level: '0'
    showports: 'False'
    update_time: '0.10'
    vlen: '1024'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    x_axis_label: '"x-Axis"'
    x_start: '0'
    x_step: '1.0'
    x_units: '""'
    y_axis_label: '"y-Axis"'
    y_units: '""'
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2000, 192.0]
    rotation: 0
    state: true
- name: samp_rate
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: ''
    short_id: ''
    type: eng_float
    value: '1000000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [168, 12.0]
    rotation: 0
    state: true
- name: zeromq_sub_source_0
  id: zeromq_sub_source
  parameters:
    address: data_source
    affinity: ''
    alias: ''
    comment: ''
    hwm: '-1'
    key: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    pass_tags: 'False'
    timeout: '100'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [64, 216.0]
    rotation: 0
    state: true

connections:
- [blocks_add_xx_0, '0', qtgui_time_sink_x_0, '0']
- [blocks_add_xx_1, '0', epy_block_1_0, '0']
- [blocks_complex_to_mag_squared_0, '0', epy_block_0, '0']
- [blocks_complex_to_mag_squared_0_0, '0', epy_block_0_0, '0']
- [blocks_complex_to_mag_squared_0_0_0, '0', epy_block_0_0_0, '0']
- [blocks_complex_to_mag_squared_0_0_1, '0', epy_block_0_0_1, '0']
- [blocks_complex_to_mag_squared_0_0_10, '0', epy_block_0_0_10, '0']
- [blocks_complex_to_mag_squared_0_0_11, '0', epy_block_0_0_11, '0']
- [blocks_complex_to_mag_squared_0_0_12, '0', epy_block_0_0_12, '0']
- [blocks_complex_to_mag_squared_0_0_13, '0', epy_block_0_0_13, '0']
- [blocks_complex_to_mag_squared_0_0_14, '0', epy_block_0_0_14, '0']
- [blocks_complex_to_mag_squared_0_0_15, '0', epy_block_0_0_15, '0']
- [blocks_complex_to_mag_squared_0_0_16, '0', epy_block_0_0_14_0, '0']
- [blocks_complex_to_mag_squared_0_0_17, '0', epy_block_0_0_14_1, '0']
- [blocks_complex_to_mag_squared_0_0_18, '0', epy_block_0_0_14_2, '0']
- [blocks_complex_to_mag_squared_0_0_19, '0', epy_block_0_0_14_3, '0']
- [blocks_complex_to_mag_squared_0_0_2, '0', epy_block_0_0_2, '0']
- [blocks_complex_to_mag_squared_0_0_20, '0', epy_block_0_0_14_4, '0']
- [blocks_complex_to_mag_squared_0_0_21, '0', epy_block_0_0_14_5, '0']
- [blocks_complex_to_mag_squared_0_0_22, '0', epy_block_0_0_14_6, '0']
- [blocks_complex_to_mag_squared_0_0_23, '0', epy_block_0_0_14_7, '0']
- [blocks_complex_to_mag_squared_0_0_24, '0', epy_block_0_0_14_8, '0']
- [blocks_complex_to_mag_squared_0_0_25, '0', epy_block_0_0_14_9, '0']
- [blocks_complex_to_mag_squared_0_0_26, '0', epy_block_0_0_14_10, '0']
- [blocks_complex_to_mag_squared_0_0_27, '0', epy_block_0_0_14_11, '0']
- [blocks_complex_to_mag_squared_0_0_28, '0', epy_block_0_0_14_12, '0']
- [blocks_complex_to_mag_squared_0_0_29, '0', epy_block_0_0_14_13, '0']
- [blocks_complex_to_mag_squared_0_0_3, '0', epy_block_0_0_3, '0']
- [blocks_complex_to_mag_squared_0_0_30, '0', epy_block_0_0_14_14, '0']
- [blocks_complex_to_mag_squared_0_0_4, '0', epy_block_0_0_4, '0']
- [blocks_complex_to_mag_squared_0_0_5, '0', epy_block_0_0_5, '0']
- [blocks_complex_to_mag_squared_0_0_6, '0', epy_block_0_0_6, '0']
- [blocks_complex_to_mag_squared_0_0_7, '0', epy_block_0_0_7, '0']
- [blocks_complex_to_mag_squared_0_0_8, '0', epy_block_0_0_8, '0']
- [blocks_complex_to_mag_squared_0_0_9, '0', epy_block_0_0_9, '0']
- [blocks_delay_0, '0', blocks_add_xx_1, '0']
- [blocks_delay_0_0, '0', blocks_add_xx_1, '1']
- [blocks_delay_0_1, '0', blocks_add_xx_1, '2']
- [blocks_delay_0_10, '0', blocks_add_xx_1, '11']
- [blocks_delay_0_11, '0', blocks_add_xx_1, '12']
- [blocks_delay_0_12, '0', blocks_add_xx_1, '13']
- [blocks_delay_0_13, '0', blocks_add_xx_1, '14']
- [blocks_delay_0_14, '0', blocks_add_xx_1, '15']
- [blocks_delay_0_14_0, '0', blocks_add_xx_1, '17']
- [blocks_delay_0_14_1, '0', blocks_add_xx_1, '18']
- [blocks_delay_0_14_10, '0', blocks_add_xx_1, '27']
- [blocks_delay_0_14_11, '0', blocks_add_xx_1, '28']
- [blocks_delay_0_14_12, '0', blocks_add_xx_1, '29']
- [blocks_delay_0_14_13, '0', blocks_add_xx_1, '30']
- [blocks_delay_0_14_14, '0', blocks_add_xx_1, '31']
- [blocks_delay_0_14_2, '0', blocks_add_xx_1, '19']
- [blocks_delay_0_14_3, '0', blocks_add_xx_1, '20']
- [blocks_delay_0_14_4, '0', blocks_add_xx_1, '21']
- [blocks_delay_0_14_5, '0', blocks_add_xx_1, '22']
- [blocks_delay_0_14_6, '0', blocks_add_xx_1, '23']
- [blocks_delay_0_14_7, '0', blocks_add_xx_1, '24']
- [blocks_delay_0_14_8, '0', blocks_add_xx_1, '25']
- [blocks_delay_0_14_9, '0', blocks_add_xx_1, '26']
- [blocks_delay_0_15, '0', blocks_add_xx_1, '16']
- [blocks_delay_0_2, '0', blocks_add_xx_1, '3']
- [blocks_delay_0_3, '0', blocks_add_xx_1, '4']
- [blocks_delay_0_4, '0', blocks_add_xx_1, '5']
- [blocks_delay_0_5, '0', blocks_add_xx_1, '6']
- [blocks_delay_0_6, '0', blocks_add_xx_1, '7']
- [blocks_delay_0_7, '0', blocks_add_xx_1, '8']
- [blocks_delay_0_8, '0', blocks_add_xx_1, '9']
- [blocks_delay_0_9, '0', blocks_add_xx_1, '10']
- [blocks_file_source_0, '0', blocks_selector_0, '3']
- [blocks_selector_0, '0', blocks_throttle_0, '0']
- [blocks_selector_1, '0', pfb_decimator_ccf_0, '0']
- [blocks_selector_1, '1', pfb_channelizer_ccf_0, '0']
- [blocks_selector_2, '0', qtgui_vector_sink_f_0, '0']
- [blocks_selector_2, '1', gr_digital_rf_digital_rf_sink_0, '0']
- [blocks_selector_2, '2', blocks_file_sink_0, '0']
- [blocks_selector_2, '3', blocks_vector_to_stream_0, '0']
- [blocks_tags_strobe_0, '0', blocks_add_xx_0, '1']
- [blocks_throttle_0, '0', blocks_selector_1, '0']
- [blocks_vector_to_stream_0, '0', blocks_add_xx_0, '0']
- [epy_block_0, '0', epy_block_1, '0']
- [epy_block_0_0, '0', blocks_delay_0, '0']
- [epy_block_0_0_0, '0', blocks_delay_0_0, '0']
- [epy_block_0_0_1, '0', blocks_delay_0_1, '0']
- [epy_block_0_0_10, '0', blocks_delay_0_10, '0']
- [epy_block_0_0_11, '0', blocks_delay_0_11, '0']
- [epy_block_0_0_12, '0', blocks_delay_0_12, '0']
- [epy_block_0_0_13, '0', blocks_delay_0_13, '0']
- [epy_block_0_0_14, '0', blocks_delay_0_14, '0']
- [epy_block_0_0_14_0, '0', blocks_delay_0_14_0, '0']
- [epy_block_0_0_14_1, '0', blocks_delay_0_14_1, '0']
- [epy_block_0_0_14_10, '0', blocks_delay_0_14_10, '0']
- [epy_block_0_0_14_11, '0', blocks_delay_0_14_11, '0']
- [epy_block_0_0_14_12, '0', blocks_delay_0_14_12, '0']
- [epy_block_0_0_14_13, '0', blocks_delay_0_14_13, '0']
- [epy_block_0_0_14_14, '0', blocks_delay_0_14_14, '0']
- [epy_block_0_0_14_2, '0', blocks_delay_0_14_2, '0']
- [epy_block_0_0_14_3, '0', blocks_delay_0_14_3, '0']
- [epy_block_0_0_14_4, '0', blocks_delay_0_14_4, '0']
- [epy_block_0_0_14_5, '0', blocks_delay_0_14_5, '0']
- [epy_block_0_0_14_6, '0', blocks_delay_0_14_6, '0']
- [epy_block_0_0_14_7, '0', blocks_delay_0_14_7, '0']
- [epy_block_0_0_14_8, '0', blocks_delay_0_14_8, '0']
- [epy_block_0_0_14_9, '0', blocks_delay_0_14_9, '0']
- [epy_block_0_0_15, '0', blocks_delay_0_15, '0']
- [epy_block_0_0_2, '0', blocks_delay_0_2, '0']
- [epy_block_0_0_3, '0', blocks_delay_0_3, '0']
- [epy_block_0_0_4, '0', blocks_delay_0_4, '0']
- [epy_block_0_0_5, '0', blocks_delay_0_5, '0']
- [epy_block_0_0_6, '0', blocks_delay_0_6, '0']
- [epy_block_0_0_7, '0', blocks_delay_0_7, '0']
- [epy_block_0_0_8, '0', blocks_delay_0_8, '0']
- [epy_block_0_0_9, '0', blocks_delay_0_9, '0']
- [epy_block_1, '0', blocks_selector_2, '0']
- [epy_block_1_0, '0', blocks_selector_2, '1']
- [gr_digital_rf_digital_rf_channel_source_0, '0', blocks_selector_0, '0']
- [osmosdr_source_0, '0', blocks_selector_0, '2']
- [pfb_channelizer_ccf_0, '0', blocks_complex_to_mag_squared_0_0, '0']
- [pfb_channelizer_ccf_0, '1', blocks_complex_to_mag_squared_0_0_0, '0']
- [pfb_channelizer_ccf_0, '10', blocks_complex_to_mag_squared_0_0_9, '0']
- [pfb_channelizer_ccf_0, '11', blocks_complex_to_mag_squared_0_0_10, '0']
- [pfb_channelizer_ccf_0, '12', blocks_complex_to_mag_squared_0_0_11, '0']
- [pfb_channelizer_ccf_0, '13', blocks_complex_to_mag_squared_0_0_12, '0']
- [pfb_channelizer_ccf_0, '14', blocks_complex_to_mag_squared_0_0_13, '0']
- [pfb_channelizer_ccf_0, '15', blocks_complex_to_mag_squared_0_0_14, '0']
- [pfb_channelizer_ccf_0, '16', blocks_complex_to_mag_squared_0_0_15, '0']
- [pfb_channelizer_ccf_0, '17', blocks_complex_to_mag_squared_0_0_16, '0']
- [pfb_channelizer_ccf_0, '18', blocks_complex_to_mag_squared_0_0_17, '0']
- [pfb_channelizer_ccf_0, '19', blocks_complex_to_mag_squared_0_0_18, '0']
- [pfb_channelizer_ccf_0, '2', blocks_complex_to_mag_squared_0_0_1, '0']
- [pfb_channelizer_ccf_0, '20', blocks_complex_to_mag_squared_0_0_19, '0']
- [pfb_channelizer_ccf_0, '21', blocks_complex_to_mag_squared_0_0_20, '0']
- [pfb_channelizer_ccf_0, '22', blocks_complex_to_mag_squared_0_0_21, '0']
- [pfb_channelizer_ccf_0, '23', blocks_complex_to_mag_squared_0_0_22, '0']
- [pfb_channelizer_ccf_0, '24', blocks_complex_to_mag_squared_0_0_23, '0']
- [pfb_channelizer_ccf_0, '25', blocks_complex_to_mag_squared_0_0_24, '0']
- [pfb_channelizer_ccf_0, '26', blocks_complex_to_mag_squared_0_0_25, '0']
- [pfb_channelizer_ccf_0, '27', blocks_complex_to_mag_squared_0_0_26, '0']
- [pfb_channelizer_ccf_0, '28', blocks_complex_to_mag_squared_0_0_27, '0']
- [pfb_channelizer_ccf_0, '29', blocks_complex_to_mag_squared_0_0_28, '0']
- [pfb_channelizer_ccf_0, '3', blocks_complex_to_mag_squared_0_0_2, '0']
- [pfb_channelizer_ccf_0, '30', blocks_complex_to_mag_squared_0_0_29, '0']
- [pfb_channelizer_ccf_0, '31', blocks_complex_to_mag_squared_0_0_30, '0']
- [pfb_channelizer_ccf_0, '4', blocks_complex_to_mag_squared_0_0_3, '0']
- [pfb_channelizer_ccf_0, '5', blocks_complex_to_mag_squared_0_0_4, '0']
- [pfb_channelizer_ccf_0, '6', blocks_complex_to_mag_squared_0_0_5, '0']
- [pfb_channelizer_ccf_0, '7', blocks_complex_to_mag_squared_0_0_6, '0']
- [pfb_channelizer_ccf_0, '8', blocks_complex_to_mag_squared_0_0_7, '0']
- [pfb_channelizer_ccf_0, '9', blocks_complex_to_mag_squared_0_0_8, '0']
- [pfb_decimator_ccf_0, '0', blocks_complex_to_mag_squared_0, '0']
- [zeromq_sub_source_0, '0', blocks_selector_0, '1']

metadata:
  file_format: 1
