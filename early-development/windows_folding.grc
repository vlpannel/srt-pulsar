options:
  parameters:
    author: vivelpanel
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: prototype_folding
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: 'Prototype Flowgraph: Folding'
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: bins
  id: variable
  parameters:
    comment: ''
    value: '1024'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [760, 72.0]
    rotation: 0
    state: true
- name: channel
  id: variable
  parameters:
    comment: 'Channel

      name'
    value: '''ch0'''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [40, 120.0]
    rotation: 0
    state: true
- name: nsamps
  id: variable
  parameters:
    comment: ''
    value: int(secs*sr)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [416, 8.0]
    rotation: 0
    state: true
- name: num_subchannels
  id: variable
  parameters:
    comment: 'Number of subchannels

      in channel'
    value: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [128, 120.0]
    rotation: 0
    state: true
- name: period
  id: variable
  parameters:
    comment: 'Pulsar and folding

      period (may later

      change to be

      different?)'
    value: 33.5028583*1e-3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [304, 16.0]
    rotation: 0
    state: true
- name: pfb_data
  id: variable
  parameters:
    comment: 'Top level directory for stored

      DRF data'
    value: '"C:\\Users\\vlpannel\\Desktop\\pfb_sim"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [40, 224.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '32000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [136, 8.0]
    rotation: 0
    state: enabled
- name: secs
  id: variable
  parameters:
    comment: ''
    value: '5'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [544, 8.0]
    rotation: 0
    state: true
- name: sr
  id: variable
  parameters:
    comment: ''
    value: '1000000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [608, 8.0]
    rotation: 0
    state: true
- name: blocks_add_const_vxx_0
  id: blocks_add_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: np.ones(bins) * 10
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: bins
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1080, 168.0]
    rotation: 0
    state: true
- name: blocks_add_const_vxx_0_0
  id: blocks_add_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: np.ones(bins) * 20
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: bins
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1080, 264.0]
    rotation: 0
    state: true
- name: blocks_add_const_vxx_0_1
  id: blocks_add_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: np.ones(bins) * 30
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: bins
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1080, 360.0]
    rotation: 0
    state: true
- name: blocks_add_const_vxx_0_2
  id: blocks_add_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: np.ones(bins) * 40
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: bins
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1264, 496.0]
    rotation: 0
    state: true
- name: blocks_add_const_vxx_0_3
  id: blocks_add_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: np.ones(bins) * 50
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: bins
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1264, 592.0]
    rotation: 0
    state: true
- name: blocks_add_const_vxx_0_4
  id: blocks_add_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: np.ones(bins) * 60
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: bins
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1264, 688.0]
    rotation: 0
    state: true
- name: blocks_msg_meta_to_pair_0
  id: blocks_msg_meta_to_pair
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    keyin: '''samples_per_second'''
    keyout: '''samp_rate'''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 1352.0]
    rotation: 0
    state: disabled
- name: blocks_msgpair_to_var_0
  id: blocks_msgpair_to_var
  parameters:
    affinity: ''
    alias: ''
    comment: Sample rate according to DRF file
    target: sr
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [376, 1404.0]
    rotation: 0
    state: disabled
- name: blocks_null_sink_0
  id: blocks_null_sink
  parameters:
    affinity: ''
    alias: ''
    bus_structure_sink: '[[0,],]'
    comment: ''
    num_inputs: '1'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1368, 80.0]
    rotation: 0
    state: true
- name: blocks_null_sink_1
  id: blocks_null_sink
  parameters:
    affinity: ''
    alias: ''
    bus_structure_sink: '[[0,],]'
    comment: ''
    num_inputs: '7'
    type: float
    vlen: bins
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1648, 824.0]
    rotation: 0
    state: true
- name: blocks_null_source_0
  id: blocks_null_source
  parameters:
    affinity: ''
    alias: ''
    bus_structure_source: '[[0,],]'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_outputs: '1'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [944, 16.0]
    rotation: 0
    state: true
- name: blocks_stream_to_vector_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: nsamps
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [480, 272.0]
    rotation: 0
    state: true
- name: blocks_stream_to_vector_0_0_0_0_0_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: nsamps
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [480, 440.0]
    rotation: 0
    state: true
- name: blocks_stream_to_vector_0_1_0_0_0_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: nsamps
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [480, 488.0]
    rotation: 0
    state: true
- name: blocks_stream_to_vector_0_1_0_0_0_0_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: nsamps
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [480, 520.0]
    rotation: 0
    state: true
- name: blocks_stream_to_vector_1
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: nsamps
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [480, 312.0]
    rotation: 0
    state: true
- name: blocks_stream_to_vector_1_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: nsamps
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [480, 352.0]
    rotation: 0
    state: true
- name: blocks_stream_to_vector_2
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: nsamps
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [480, 392.0]
    rotation: 0
    state: true
- name: blocks_throttle_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: Controlling flow (no hardware here)
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1120, 24.0]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    Nbins: bins
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n#from psrdynspec.modules.fold import execute_plan,\
      \ fold_ts\n\nclass blk(gr.sync_block):\n    \"\"\"\n    Pulsar folding block\
      \ - takes in time series of a single channel and folds it over the pulsar period.\n\
      \n    Outputs a vector of length Nbins which is the number of counts per phase\
      \ bin (this can be used for plotting).\n\n    \n    Parameters\n    ----------\n\
      \n    samps : int\n        Number of samples coming in; the length of the vector\
      \ passed in\n\n    samp_rate : float\n        Sample rate of data (taken from\
      \ metadata)\n\n    Nbins : int\n        Number of phase bins in which to sort\
      \ samples\n\n    pfold : float\n        Folding period (should be same or similar\
      \ to period of pulsar)\n    \"\"\"\n\n    def __init__(self, samps=int(5e6),\
      \ samp_rate=1e6, Nbins=1024, pfold=33.5028583*1e-3):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Pulsar Folding',   # will show up in GRC\n\
      \            in_sig=[(np.complex64, samps)],\n            out_sig=[(np.float32,\
      \ Nbins), (np.float32, Nbins)]\n        )\n        '''\n        Initializes\
      \ pulsar folding block\n\n        Parameters\n        ----------\n\n       \
      \ samps : int\n            Number of samples coming in-- the length of the vector\
      \ passed in\n\n        samp_rate : float\n            Sample rate of data (taken\
      \ from metadata)\n\n        Nbins : int\n            Number of phase bins in\
      \ which to sort samples\n\n        pfold : float\n            Folding period\
      \ (should be same or similar to period of pulsar)\n        '''\n        self.nsamps\
      \ = samps\n        self.samp_rate = samp_rate\n        self.Nbins = Nbins\n\
      \        self.pfold = pfold\n\n        self.times = np.arange(self.nsamps)/samp_rate\n\
      \n    def work(self, input_items, output_items):\n\n        # folding\n    \
      \    self.profile, self.phibin_centers, self.counts = fold_ts(np.abs(input_items[0])**2,\
      \ self.times, self.pfold, self.Nbins, True)\n        \n        output_items[0]\
      \ = self.times\n        output_items[1] = self.profile\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    pfold: period
    samp_rate: sr
    samps: nsamps
  states:
    _io_cache: '(''Pulsar Folding'', ''blk'', [(''samps'', ''5000000''), (''samp_rate'',
      ''1000000.0''), (''Nbins'', ''1024''), (''pfold'', ''0.0335028583'')], [(''0'',
      ''complex'', 5000000)], [(''0'', ''float'', 1024), (''1'', ''float'', 1024)],
      ''\n    Pulsar folding block - takes in time series of a single channel and
      folds it over the pulsar period.\n\n    Outputs a vector of length Nbins which
      is the number of counts per phase bin (this can be used for plotting).\n\n    \n    Parameters\n    ----------\n\n    samps
      : int\n        Number of samples coming in; the length of the vector passed
      in\n\n    samp_rate : float\n        Sample rate of data (taken from metadata)\n\n    Nbins
      : int\n        Number of phase bins in which to sort samples\n\n    pfold :
      float\n        Folding period (should be same or similar to period of pulsar)\n    '',
      [''Nbins'', ''pfold'', ''samp_rate''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [936, 72.0]
    rotation: 0
    state: true
- name: epy_block_0_0
  id: epy_block
  parameters:
    Nbins: bins
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n#from psrdynspec.modules.fold import execute_plan,\
      \ fold_ts\n\nclass blk(gr.sync_block):\n    \"\"\"\n    Pulsar folding block\
      \ - takes in time series of a single channel and folds it over the pulsar period.\n\
      \n    Outputs a vector of length Nbins which is the number of counts per phase\
      \ bin (this can be used for plotting).\n\n    \n    Parameters\n    ----------\n\
      \n    nsamps : int\n        Number of samples coming in; the length of the vector\
      \ passed in\n\n    samp_rate : float\n        Sample rate of data (taken from\
      \ metadata)\n\n    Nbins : int\n        Number of phase bins in which to sort\
      \ samples\n\n    pfold : float\n        Folding period (should be same or similar\
      \ to period of pulsar)\n    \"\"\"\n\n    def __init__(self, nsamps=int(5e6),\
      \ samp_rate=1e6, Nbins=1024, pfold=33.5028583*1e-3):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Pulsar Folding',   # will show up in GRC\n\
      \            in_sig=[(np.complex64, nsamps)],\n            out_sig=[(np.float32,\
      \ Nbins), (np.float32, Nbins)]\n        )\n        '''\n        Initializes\
      \ pulsar folding block\n\n        Parameters\n        ----------\n\n       \
      \ nsamps : int\n            Number of samples coming in-- the length of the\
      \ vector passed in\n\n        samp_rate : float\n            Sample rate of\
      \ data (taken from metadata)\n\n        Nbins : int\n            Number of phase\
      \ bins in which to sort samples\n\n        pfold : float\n            Folding\
      \ period (should be same or similar to period of pulsar)\n        '''\n    \
      \    self.nsamps = nsamps\n        self.samp_rate = samp_rate\n        self.Nbins\
      \ = Nbins\n        self.pfold = pfold\n\n        self.times = np.arange(nsamps)/samp_rate\n\
      \n    def work(self, input_items, output_items):\n\n        # folding\n    \
      \    self.profile, self.phibin_centers, self.counts = fold_ts(np.abs(input_items[0])**2,\
      \ self.times, self.pfold, self.Nbins, True)\n        \n        output_items[0]\
      \ = self.times\n        output_items[1] = self.profile\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    nsamps: nsamps
    pfold: period
    samp_rate: sr
  states:
    _io_cache: '(''Pulsar Folding'', ''blk'', [(''nsamps'', ''5000000''), (''samp_rate'',
      ''1000000.0''), (''Nbins'', ''1024''), (''pfold'', ''0.0335028583'')], [(''0'',
      ''complex'', 5000000)], [(''0'', ''float'', 1024), (''1'', ''float'', 1024)],
      ''\n    Pulsar folding block - takes in time series of a single channel and
      folds it over the pulsar period.\n\n    Outputs a vector of length Nbins which
      is the number of counts per phase bin (this can be used for plotting).\n\n    \n    Parameters\n    ----------\n\n    nsamps
      : int\n        Number of samples coming in; the length of the vector passed
      in\n\n    samp_rate : float\n        Sample rate of data (taken from metadata)\n\n    Nbins
      : int\n        Number of phase bins in which to sort samples\n\n    pfold :
      float\n        Folding period (should be same or similar to period of pulsar)\n    '',
      [''Nbins'', ''nsamps'', ''pfold'', ''samp_rate''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [936, 168.0]
    rotation: 0
    state: true
- name: epy_block_0_1
  id: epy_block
  parameters:
    Nbins: bins
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n#from psrdynspec.modules.fold import execute_plan,\
      \ fold_ts\n\nclass blk(gr.sync_block):\n    \"\"\"\n    Pulsar folding block\
      \ - takes in time series of a single channel and folds it over the pulsar period.\n\
      \n    Outputs a vector of length Nbins which is the number of counts per phase\
      \ bin (this can be used for plotting).\n\n    \n    Parameters\n    ----------\n\
      \n    nsamps : int\n        Number of samples coming in; the length of the vector\
      \ passed in\n\n    samp_rate : float\n        Sample rate of data (taken from\
      \ metadata)\n\n    Nbins : int\n        Number of phase bins in which to sort\
      \ samples\n\n    pfold : float\n        Folding period (should be same or similar\
      \ to period of pulsar)\n    \"\"\"\n\n    def __init__(self, nsamps=int(5e6),\
      \ samp_rate=1e6, Nbins=1024, pfold=33.5028583*1e-3):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Pulsar Folding',   # will show up in GRC\n\
      \            in_sig=[(np.complex64, nsamps)],\n            out_sig=[(np.float32,\
      \ Nbins), (np.float32, Nbins)]\n        )\n        '''\n        Initializes\
      \ pulsar folding block\n\n        Parameters\n        ----------\n\n       \
      \ nsamps : int\n            Number of samples coming in-- the length of the\
      \ vector passed in\n\n        samp_rate : float\n            Sample rate of\
      \ data (taken from metadata)\n\n        Nbins : int\n            Number of phase\
      \ bins in which to sort samples\n\n        pfold : float\n            Folding\
      \ period (should be same or similar to period of pulsar)\n        '''\n    \
      \    self.nsamps = nsamps\n        self.samp_rate = samp_rate\n        self.Nbins\
      \ = Nbins\n        self.pfold = pfold\n\n        self.times = np.arange(nsamps)/samp_rate\n\
      \n    def work(self, input_items, output_items):\n\n        # folding\n    \
      \    self.profile, self.phibin_centers, self.counts = fold_ts(np.abs(input_items[0])**2,\
      \ self.times, self.pfold, self.Nbins, True)\n        \n        output_items[0]\
      \ = self.times\n        output_items[1] = self.profile\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    nsamps: nsamps
    pfold: period
    samp_rate: sr
  states:
    _io_cache: '(''Pulsar Folding'', ''blk'', [(''nsamps'', ''5000000''), (''samp_rate'',
      ''1000000.0''), (''Nbins'', ''1024''), (''pfold'', ''0.0335028583'')], [(''0'',
      ''complex'', 5000000)], [(''0'', ''float'', 1024), (''1'', ''float'', 1024)],
      ''\n    Pulsar folding block - takes in time series of a single channel and
      folds it over the pulsar period.\n\n    Outputs a vector of length Nbins which
      is the number of counts per phase bin (this can be used for plotting).\n\n    \n    Parameters\n    ----------\n\n    nsamps
      : int\n        Number of samples coming in; the length of the vector passed
      in\n\n    samp_rate : float\n        Sample rate of data (taken from metadata)\n\n    Nbins
      : int\n        Number of phase bins in which to sort samples\n\n    pfold :
      float\n        Folding period (should be same or similar to period of pulsar)\n    '',
      [''Nbins'', ''nsamps'', ''pfold'', ''samp_rate''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [936, 264.0]
    rotation: 0
    state: true
- name: epy_block_0_2
  id: epy_block
  parameters:
    Nbins: bins
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n#from psrdynspec.modules.fold import execute_plan,\
      \ fold_ts\n\nclass blk(gr.sync_block):\n    \"\"\"\n    Pulsar folding block\
      \ - takes in time series of a single channel and folds it over the pulsar period.\n\
      \n    Outputs a vector of length Nbins which is the number of counts per phase\
      \ bin (this can be used for plotting).\n\n    \n    Parameters\n    ----------\n\
      \n    nsamps : int\n        Number of samples coming in; the length of the vector\
      \ passed in\n\n    samp_rate : float\n        Sample rate of data (taken from\
      \ metadata)\n\n    Nbins : int\n        Number of phase bins in which to sort\
      \ samples\n\n    pfold : float\n        Folding period (should be same or similar\
      \ to period of pulsar)\n    \"\"\"\n\n    def __init__(self, nsamps=int(5e6),\
      \ samp_rate=1e6, Nbins=1024, pfold=33.5028583*1e-3):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Pulsar Folding',   # will show up in GRC\n\
      \            in_sig=[(np.complex64, nsamps)],\n            out_sig=[(np.float32,\
      \ Nbins), (np.float32, Nbins)]\n        )\n        '''\n        Initializes\
      \ pulsar folding block\n\n        Parameters\n        ----------\n\n       \
      \ nsamps : int\n            Number of samples coming in-- the length of the\
      \ vector passed in\n\n        samp_rate : float\n            Sample rate of\
      \ data (taken from metadata)\n\n        Nbins : int\n            Number of phase\
      \ bins in which to sort samples\n\n        pfold : float\n            Folding\
      \ period (should be same or similar to period of pulsar)\n        '''\n    \
      \    self.nsamps = nsamps\n        self.samp_rate = samp_rate\n        self.Nbins\
      \ = Nbins\n        self.pfold = pfold\n\n        self.times = np.arange(nsamps)/samp_rate\n\
      \n    def work(self, input_items, output_items):\n\n        # folding\n    \
      \    self.profile, self.phibin_centers, self.counts = fold_ts(np.abs(input_items[0])**2,\
      \ self.times, self.pfold, self.Nbins, True)\n        \n        output_items[0]\
      \ = self.times\n        output_items[1] = self.profile\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    nsamps: nsamps
    pfold: period
    samp_rate: sr
  states:
    _io_cache: '(''Pulsar Folding'', ''blk'', [(''nsamps'', ''5000000''), (''samp_rate'',
      ''1000000.0''), (''Nbins'', ''1024''), (''pfold'', ''0.0335028583'')], [(''0'',
      ''complex'', 5000000)], [(''0'', ''float'', 1024), (''1'', ''float'', 1024)],
      ''\n    Pulsar folding block - takes in time series of a single channel and
      folds it over the pulsar period.\n\n    Outputs a vector of length Nbins which
      is the number of counts per phase bin (this can be used for plotting).\n\n    \n    Parameters\n    ----------\n\n    nsamps
      : int\n        Number of samples coming in; the length of the vector passed
      in\n\n    samp_rate : float\n        Sample rate of data (taken from metadata)\n\n    Nbins
      : int\n        Number of phase bins in which to sort samples\n\n    pfold :
      float\n        Folding period (should be same or similar to period of pulsar)\n    '',
      [''Nbins'', ''nsamps'', ''pfold'', ''samp_rate''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [936, 360.0]
    rotation: 0
    state: true
- name: epy_block_0_2_0
  id: epy_block
  parameters:
    Nbins: bins
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n#from psrdynspec.modules.fold import execute_plan,\
      \ fold_ts\n\nclass blk(gr.sync_block):\n    \"\"\"\n    Pulsar folding block\
      \ - takes in time series of a single channel and folds it over the pulsar period.\n\
      \n    Outputs a vector of length Nbins which is the number of counts per phase\
      \ bin (this can be used for plotting).\n\n    \n    Parameters\n    ----------\n\
      \n    nsamps : int\n        Number of samples coming in; the length of the vector\
      \ passed in\n\n    samp_rate : float\n        Sample rate of data (taken from\
      \ metadata)\n\n    Nbins : int\n        Number of phase bins in which to sort\
      \ samples\n\n    pfold : float\n        Folding period (should be same or similar\
      \ to period of pulsar)\n    \"\"\"\n\n    def __init__(self, nsamps=int(5e6),\
      \ samp_rate=1e6, Nbins=1024, pfold=33.5028583*1e-3):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Pulsar Folding',   # will show up in GRC\n\
      \            in_sig=[(np.complex64, nsamps)],\n            out_sig=[(np.float32,\
      \ Nbins), (np.float32, Nbins)]\n        )\n        '''\n        Initializes\
      \ pulsar folding block\n\n        Parameters\n        ----------\n\n       \
      \ nsamps : int\n            Number of samples coming in-- the length of the\
      \ vector passed in\n\n        samp_rate : float\n            Sample rate of\
      \ data (taken from metadata)\n\n        Nbins : int\n            Number of phase\
      \ bins in which to sort samples\n\n        pfold : float\n            Folding\
      \ period (should be same or similar to period of pulsar)\n        '''\n    \
      \    self.nsamps = nsamps\n        self.samp_rate = samp_rate\n        self.Nbins\
      \ = Nbins\n        self.pfold = pfold\n\n        self.times = np.arange(nsamps)/samp_rate\n\
      \n    def work(self, input_items, output_items):\n\n        # folding\n    \
      \    self.profile, self.phibin_centers, self.counts = fold_ts(np.abs(input_items[0])**2,\
      \ self.times, self.pfold, self.Nbins, True)\n        \n        output_items[0]\
      \ = self.times\n        output_items[1] = self.profile\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    nsamps: nsamps
    pfold: period
    samp_rate: sr
  states:
    _io_cache: '(''Pulsar Folding'', ''blk'', [(''nsamps'', ''5000000''), (''samp_rate'',
      ''1000000.0''), (''Nbins'', ''1024''), (''pfold'', ''0.0335028583'')], [(''0'',
      ''complex'', 5000000)], [(''0'', ''float'', 1024), (''1'', ''float'', 1024)],
      ''\n    Pulsar folding block - takes in time series of a single channel and
      folds it over the pulsar period.\n\n    Outputs a vector of length Nbins which
      is the number of counts per phase bin (this can be used for plotting).\n\n    \n    Parameters\n    ----------\n\n    nsamps
      : int\n        Number of samples coming in; the length of the vector passed
      in\n\n    samp_rate : float\n        Sample rate of data (taken from metadata)\n\n    Nbins
      : int\n        Number of phase bins in which to sort samples\n\n    pfold :
      float\n        Folding period (should be same or similar to period of pulsar)\n    '',
      [''Nbins'', ''nsamps'', ''pfold'', ''samp_rate''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1032, 488.0]
    rotation: 0
    state: true
- name: epy_block_0_2_1
  id: epy_block
  parameters:
    Nbins: bins
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n#from psrdynspec.modules.fold import execute_plan,\
      \ fold_ts\n\nclass blk(gr.sync_block):\n    \"\"\"\n    Pulsar folding block\
      \ - takes in time series of a single channel and folds it over the pulsar period.\n\
      \n    Outputs a vector of length Nbins which is the number of counts per phase\
      \ bin (this can be used for plotting).\n\n    \n    Parameters\n    ----------\n\
      \n    nsamps : int\n        Number of samples coming in; the length of the vector\
      \ passed in\n\n    samp_rate : float\n        Sample rate of data (taken from\
      \ metadata)\n\n    Nbins : int\n        Number of phase bins in which to sort\
      \ samples\n\n    pfold : float\n        Folding period (should be same or similar\
      \ to period of pulsar)\n    \"\"\"\n\n    def __init__(self, nsamps=int(5e6),\
      \ samp_rate=1e6, Nbins=1024, pfold=33.5028583*1e-3):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Pulsar Folding',   # will show up in GRC\n\
      \            in_sig=[(np.complex64, nsamps)],\n            out_sig=[(np.float32,\
      \ Nbins), (np.float32, Nbins)]\n        )\n        '''\n        Initializes\
      \ pulsar folding block\n\n        Parameters\n        ----------\n\n       \
      \ nsamps : int\n            Number of samples coming in-- the length of the\
      \ vector passed in\n\n        samp_rate : float\n            Sample rate of\
      \ data (taken from metadata)\n\n        Nbins : int\n            Number of phase\
      \ bins in which to sort samples\n\n        pfold : float\n            Folding\
      \ period (should be same or similar to period of pulsar)\n        '''\n    \
      \    self.nsamps = nsamps\n        self.samp_rate = samp_rate\n        self.Nbins\
      \ = Nbins\n        self.pfold = pfold\n\n        self.times = np.arange(nsamps)/samp_rate\n\
      \n    def work(self, input_items, output_items):\n\n        # folding\n    \
      \    self.profile, self.phibin_centers, self.counts = fold_ts(np.abs(input_items[0])**2,\
      \ self.times, self.pfold, self.Nbins, True)\n        \n        output_items[0]\
      \ = self.times\n        output_items[1] = self.profile\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    nsamps: nsamps
    pfold: period
    samp_rate: sr
  states:
    _io_cache: '(''Pulsar Folding'', ''blk'', [(''nsamps'', ''5000000''), (''samp_rate'',
      ''1000000.0''), (''Nbins'', ''1024''), (''pfold'', ''0.0335028583'')], [(''0'',
      ''complex'', 5000000)], [(''0'', ''float'', 1024), (''1'', ''float'', 1024)],
      ''\n    Pulsar folding block - takes in time series of a single channel and
      folds it over the pulsar period.\n\n    Outputs a vector of length Nbins which
      is the number of counts per phase bin (this can be used for plotting).\n\n    \n    Parameters\n    ----------\n\n    nsamps
      : int\n        Number of samples coming in; the length of the vector passed
      in\n\n    samp_rate : float\n        Sample rate of data (taken from metadata)\n\n    Nbins
      : int\n        Number of phase bins in which to sort samples\n\n    pfold :
      float\n        Folding period (should be same or similar to period of pulsar)\n    '',
      [''Nbins'', ''nsamps'', ''pfold'', ''samp_rate''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1032, 584.0]
    rotation: 0
    state: true
- name: epy_block_0_2_2
  id: epy_block
  parameters:
    Nbins: bins
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n#from psrdynspec.modules.fold import execute_plan,\
      \ fold_ts\n\nclass blk(gr.sync_block):\n    \"\"\"\n    Pulsar folding block\
      \ - takes in time series of a single channel and folds it over the pulsar period.\n\
      \n    Outputs a vector of length Nbins which is the number of counts per phase\
      \ bin (this can be used for plotting).\n\n    \n    Parameters\n    ----------\n\
      \n    nsamps : int\n        Number of samples coming in; the length of the vector\
      \ passed in\n\n    samp_rate : float\n        Sample rate of data (taken from\
      \ metadata)\n\n    Nbins : int\n        Number of phase bins in which to sort\
      \ samples\n\n    pfold : float\n        Folding period (should be same or similar\
      \ to period of pulsar)\n    \"\"\"\n\n    def __init__(self, nsamps=int(5e6),\
      \ samp_rate=1e6, Nbins=1024, pfold=33.5028583*1e-3):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Pulsar Folding',   # will show up in GRC\n\
      \            in_sig=[(np.complex64, nsamps)],\n            out_sig=[(np.float32,\
      \ Nbins), (np.float32, Nbins)]\n        )\n        '''\n        Initializes\
      \ pulsar folding block\n\n        Parameters\n        ----------\n\n       \
      \ nsamps : int\n            Number of samples coming in-- the length of the\
      \ vector passed in\n\n        samp_rate : float\n            Sample rate of\
      \ data (taken from metadata)\n\n        Nbins : int\n            Number of phase\
      \ bins in which to sort samples\n\n        pfold : float\n            Folding\
      \ period (should be same or similar to period of pulsar)\n        '''\n    \
      \    self.nsamps = nsamps\n        self.samp_rate = samp_rate\n        self.Nbins\
      \ = Nbins\n        self.pfold = pfold\n\n        self.times = np.arange(nsamps)/samp_rate\n\
      \n    def work(self, input_items, output_items):\n\n        # folding\n    \
      \    self.profile, self.phibin_centers, self.counts = fold_ts(np.abs(input_items[0])**2,\
      \ self.times, self.pfold, self.Nbins, True)\n        \n        output_items[0]\
      \ = self.times\n        output_items[1] = self.profile\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    nsamps: nsamps
    pfold: period
    samp_rate: sr
  states:
    _io_cache: '(''Pulsar Folding'', ''blk'', [(''nsamps'', ''5000000''), (''samp_rate'',
      ''1000000.0''), (''Nbins'', ''1024''), (''pfold'', ''0.0335028583'')], [(''0'',
      ''complex'', 5000000)], [(''0'', ''float'', 1024), (''1'', ''float'', 1024)],
      ''\n    Pulsar folding block - takes in time series of a single channel and
      folds it over the pulsar period.\n\n    Outputs a vector of length Nbins which
      is the number of counts per phase bin (this can be used for plotting).\n\n    \n    Parameters\n    ----------\n\n    nsamps
      : int\n        Number of samples coming in; the length of the vector passed
      in\n\n    samp_rate : float\n        Sample rate of data (taken from metadata)\n\n    Nbins
      : int\n        Number of phase bins in which to sort samples\n\n    pfold :
      float\n        Folding period (should be same or similar to period of pulsar)\n    '',
      [''Nbins'', ''nsamps'', ''pfold'', ''samp_rate''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1032, 680.0]
    rotation: 0
    state: true
- name: gr_digital_rf_digital_rf_source_0_0
  id: gr_digital_rf_digital_rf_source
  parameters:
    affinity: ''
    alias: ''
    channel0: ch0
    channel1: ch1
    channel10: ch10
    channel11: ch11
    channel12: ch12
    channel13: ch13
    channel14: ch14
    channel15: ch15
    channel16: ch16
    channel17: ch17
    channel18: ch18
    channel19: ch19
    channel2: ch2
    channel20: ch20
    channel21: ch21
    channel22: ch22
    channel23: ch23
    channel24: ch24
    channel25: ch25
    channel26: ch26
    channel27: ch27
    channel28: ch28
    channel29: ch29
    channel3: ch3
    channel30: ch30
    channel31: ch31
    channel4: ch26
    channel5: ch27
    channel6: ch28
    channel7: ch7
    channel8: ch8
    channel9: ch9
    comment: ''
    end0: ''
    end1: ''
    end10: ''
    end11: ''
    end12: ''
    end13: ''
    end14: ''
    end15: ''
    end16: ''
    end17: ''
    end18: ''
    end19: ''
    end2: ''
    end20: ''
    end21: ''
    end22: ''
    end23: ''
    end24: ''
    end25: ''
    end26: ''
    end27: ''
    end28: ''
    end29: ''
    end3: ''
    end30: ''
    end31: ''
    end4: ''
    end5: ''
    end6: ''
    end7: ''
    end8: ''
    end9: ''
    gapless: 'False'
    hide_msg_port: 'True'
    maxoutbuf: '0'
    min_chunksize: '0'
    minoutbuf: '0'
    nchan: '7'
    repeat: 'False'
    start0: ''
    start1: ''
    start10: ''
    start11: ''
    start12: ''
    start13: ''
    start14: ''
    start15: ''
    start16: ''
    start17: ''
    start18: ''
    start19: ''
    start2: ''
    start20: ''
    start21: ''
    start22: ''
    start23: ''
    start24: ''
    start25: ''
    start26: ''
    start27: ''
    start28: ''
    start29: ''
    start3: ''
    start30: ''
    start31: ''
    start4: ''
    start5: ''
    start6: ''
    start7: ''
    start8: ''
    start9: ''
    throttle: 'False'
    top_level_dir: pfb_data
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 332.0]
    rotation: 0
    state: true
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import numpy as np
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [744, 16.0]
    rotation: 0
    state: true
- name: note_0
  id: note
  parameters:
    alias: ''
    comment: "Remember to \nchange the \ndefault values\nwhen nsamps\nchanges!"
    note: folding
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [912, 792.0]
    rotation: 0
    state: true
- name: note_1
  id: note
  parameters:
    alias: ''
    comment: 'Remember to pay attention

      to connections here if

      subchannels change!'
    note: Subchannels change
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [256, 152.0]
    rotation: 0
    state: true
- name: note_3
  id: note
  parameters:
    alias: ''
    comment: 'Remember to alter data types

      if file outputs different type!'
    note: Assumes Complex (complex32)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [528, 104.0]
    rotation: 0
    state: true
- name: qtgui_vector_sink_f_0
  id: qtgui_vector_sink_f
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    grid: 'False'
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '7'
    ref_level: '0'
    showports: 'False'
    update_time: '0.10'
    vlen: bins
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    x_axis_label: '"x-Axis"'
    x_start: '0'
    x_step: '1.0'
    x_units: '""'
    y_axis_label: '"y-Axis"'
    y_units: '""'
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1752, 120.0]
    rotation: 0
    state: true

connections:
- [blocks_add_const_vxx_0, '0', qtgui_vector_sink_f_0, '1']
- [blocks_add_const_vxx_0_0, '0', qtgui_vector_sink_f_0, '2']
- [blocks_add_const_vxx_0_1, '0', qtgui_vector_sink_f_0, '3']
- [blocks_add_const_vxx_0_2, '0', qtgui_vector_sink_f_0, '4']
- [blocks_add_const_vxx_0_3, '0', qtgui_vector_sink_f_0, '5']
- [blocks_add_const_vxx_0_4, '0', qtgui_vector_sink_f_0, '6']
- [blocks_msg_meta_to_pair_0, outpair, blocks_msgpair_to_var_0, inpair]
- [blocks_null_source_0, '0', blocks_throttle_0, '0']
- [blocks_stream_to_vector_0, '0', epy_block_0, '0']
- [blocks_stream_to_vector_0_0_0_0_0_0, '0', epy_block_0_2_0, '0']
- [blocks_stream_to_vector_0_1_0_0_0_0, '0', epy_block_0_2_1, '0']
- [blocks_stream_to_vector_0_1_0_0_0_0_0, '0', epy_block_0_2_2, '0']
- [blocks_stream_to_vector_1, '0', epy_block_0_0, '0']
- [blocks_stream_to_vector_1_0, '0', epy_block_0_1, '0']
- [blocks_stream_to_vector_2, '0', epy_block_0_2, '0']
- [blocks_throttle_0, '0', blocks_null_sink_0, '0']
- [epy_block_0, '0', qtgui_vector_sink_f_0, '0']
- [epy_block_0, '1', blocks_null_sink_1, '0']
- [epy_block_0_0, '0', blocks_add_const_vxx_0, '0']
- [epy_block_0_0, '1', blocks_null_sink_1, '1']
- [epy_block_0_1, '0', blocks_add_const_vxx_0_0, '0']
- [epy_block_0_1, '1', blocks_null_sink_1, '2']
- [epy_block_0_2, '0', blocks_add_const_vxx_0_1, '0']
- [epy_block_0_2, '1', blocks_null_sink_1, '3']
- [epy_block_0_2_0, '0', blocks_add_const_vxx_0_2, '0']
- [epy_block_0_2_0, '1', blocks_null_sink_1, '4']
- [epy_block_0_2_1, '0', blocks_add_const_vxx_0_3, '0']
- [epy_block_0_2_1, '1', blocks_null_sink_1, '5']
- [epy_block_0_2_2, '0', blocks_add_const_vxx_0_4, '0']
- [epy_block_0_2_2, '1', blocks_null_sink_1, '6']
- [gr_digital_rf_digital_rf_source_0_0, '0', blocks_stream_to_vector_0, '0']
- [gr_digital_rf_digital_rf_source_0_0, '1', blocks_stream_to_vector_1, '0']
- [gr_digital_rf_digital_rf_source_0_0, '2', blocks_stream_to_vector_1_0, '0']
- [gr_digital_rf_digital_rf_source_0_0, '3', blocks_stream_to_vector_2, '0']
- [gr_digital_rf_digital_rf_source_0_0, '4', blocks_stream_to_vector_0_0_0_0_0_0,
  '0']
- [gr_digital_rf_digital_rf_source_0_0, '5', blocks_stream_to_vector_0_1_0_0_0_0,
  '0']
- [gr_digital_rf_digital_rf_source_0_0, '6', blocks_stream_to_vector_0_1_0_0_0_0_0,
  '0']
- [gr_digital_rf_digital_rf_source_0_0, properties, blocks_msg_meta_to_pair_0, inmeta]

metadata:
  file_format: 1
  grc_version: 3.10.3.0
