options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: test
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '1000000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12]
    rotation: 0
    state: enabled
- name: sig
  id: variable_qtgui_push_button
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    pressed: '1'
    released: '0'
    type: int
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1024, 112.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: '1000'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [240, 104.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_1
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: '800'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    type: complex
    waveform: analog.GR_SIN_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [224, 280.0]
    rotation: 0
    state: enabled
- name: blocks_add_xx_0
  id: blocks_add_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [656, 184.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_const_vxx_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: sig
    maxoutbuf: '0'
    minoutbuf: '0'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [448, 328.0]
    rotation: 0
    state: enabled
- name: blocks_throttle_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [728, 304.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self, example_param=1.0):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Embedded Python Block',   # will show up in GRC\n\
      \            in_sig=[np.complex64],\n            out_sig=[np.complex64]\n  \
      \      )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.example_param\
      \ = example_param\n\n    def work(self, input_items, output_items):\n      \
      \  \"\"\"example: multiply with constant\"\"\"\n        output_items[0][:] =\
      \ input_items[0] * self.example_param\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    example_param: '2'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Embedded Python Block', 'blk', [('example_param', '1.0')], [('0',
      'complex', 1)], [('0', 'complex', 1)], 'Embedded Python Block example - a simple
      multiply const', ['example_param'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [752, 176.0]
    rotation: 0
    state: true
- name: gr_digital_rf_digital_rf_sink_0
  id: gr_digital_rf_digital_rf_sink
  parameters:
    affinity: ''
    alias: ''
    center_freqs: '[]'
    channel0: ch0
    channel1: ch1
    channel10: ch10
    channel11: ch11
    channel12: ch12
    channel13: ch13
    channel14: ch14
    channel15: ch15
    channel16: ch16
    channel17: ch17
    channel18: ch18
    channel19: ch19
    channel2: ch2
    channel20: ch20
    channel21: ch21
    channel22: ch22
    channel23: ch23
    channel24: ch24
    channel25: ch25
    channel26: ch26
    channel27: ch27
    channel28: ch28
    channel29: ch29
    channel3: ch3
    channel30: ch30
    channel31: ch31
    channel4: ch4
    channel5: ch5
    channel6: ch6
    channel7: ch7
    channel8: ch8
    channel9: ch9
    checksum: 'False'
    comment: ''
    compression_level: '0'
    debug: 'False'
    file_cadence_ms: '1000'
    ignore_tags: 'False'
    input: fc32
    is_continuous: 'True'
    marching_periods: 'True'
    metadata: '{}'
    min_chunksize: '0'
    nchan: '1'
    sample_rate_denominator: '1'
    sample_rate_numerator: int(samp_rate)
    start: ''
    stop_on_skipped: 'False'
    stop_on_time_tag: 'False'
    subdir_cadence_s: '3600'
    top_level_dir: out
    uuid: ''
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [968, 400.0]
    rotation: 0
    state: disabled
- name: gr_digital_rf_digital_rf_source_0
  id: gr_digital_rf_digital_rf_source
  parameters:
    affinity: ''
    alias: ''
    channel0: fake-misa
    channel1: ch1
    channel10: ch10
    channel11: ch11
    channel12: ch12
    channel13: ch13
    channel14: ch14
    channel15: ch15
    channel16: ch16
    channel17: ch17
    channel18: ch18
    channel19: ch19
    channel2: ch2
    channel20: ch20
    channel21: ch21
    channel22: ch22
    channel23: ch23
    channel24: ch24
    channel25: ch25
    channel26: ch26
    channel27: ch27
    channel28: ch28
    channel29: ch29
    channel3: ch3
    channel30: ch30
    channel31: ch31
    channel4: ch4
    channel5: ch5
    channel6: ch6
    channel7: ch7
    channel8: ch8
    channel9: ch9
    comment: ''
    end0: ''
    end1: ''
    end10: ''
    end11: ''
    end12: ''
    end13: ''
    end14: ''
    end15: ''
    end16: ''
    end17: ''
    end18: ''
    end19: ''
    end2: ''
    end20: ''
    end21: ''
    end22: ''
    end23: ''
    end24: ''
    end25: ''
    end26: ''
    end27: ''
    end28: ''
    end29: ''
    end3: ''
    end30: ''
    end31: ''
    end4: ''
    end5: ''
    end6: ''
    end7: ''
    end8: ''
    end9: ''
    gapless: 'False'
    hide_msg_port: 'True'
    maxoutbuf: '0'
    min_chunksize: '0'
    minoutbuf: '0'
    nchan: '1'
    repeat: 'False'
    start0: ''
    start1: ''
    start10: ''
    start11: ''
    start12: ''
    start13: ''
    start14: ''
    start15: ''
    start16: ''
    start17: ''
    start18: ''
    start19: ''
    start2: ''
    start20: ''
    start21: ''
    start22: ''
    start23: ''
    start24: ''
    start25: ''
    start26: ''
    start27: ''
    start28: ''
    start29: ''
    start3: ''
    start30: ''
    start31: ''
    start4: ''
    start5: ''
    start6: ''
    start7: ''
    start8: ''
    start9: ''
    throttle: 'False'
    top_level_dir: pulsar_sim
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [464, 488.0]
    rotation: 0
    state: disabled
- name: note_0
  id: note
  parameters:
    alias: ''
    comment: "DRF works here!\nHowever, it takes\na really long time\nif a lot of\
      \ data is\nsampled (make \nsure to use \nindices for more than\n5 sec of data).\
      \ Also,\nrepeat playback\nalso works. DRF can\nsave and read\ndata samples in\n\
      cf32."
    note: drf
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1320, 32.0]
    rotation: 0
    state: true
- name: qtgui_sink_x_0
  id: qtgui_sink_x
  parameters:
    affinity: ''
    alias: ''
    bw: samp_rate
    comment: ''
    fc: '0'
    fftsize: '1024'
    gui_hint: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    plotconst: 'True'
    plotfreq: 'True'
    plottime: 'True'
    plotwaterfall: 'True'
    rate: '10'
    showports: 'False'
    showrf: 'False'
    type: complex
    wintype: window.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [968, 264.0]
    rotation: 0
    state: true

connections:
- [analog_sig_source_x_0, '0', blocks_add_xx_0, '0']
- [analog_sig_source_x_1, '0', blocks_multiply_const_vxx_0, '0']
- [blocks_add_xx_0, '0', epy_block_0, '0']
- [blocks_multiply_const_vxx_0, '0', blocks_add_xx_0, '1']
- [blocks_throttle_0, '0', gr_digital_rf_digital_rf_sink_0, '0']
- [blocks_throttle_0, '0', qtgui_sink_x_0, '0']
- [epy_block_0, '0', blocks_throttle_0, '0']
- [gr_digital_rf_digital_rf_source_0, '0', blocks_throttle_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.3.0
