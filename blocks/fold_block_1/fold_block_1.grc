options:
  parameters:
    author: Viveca Pannell
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: hb
    hier_block_src_path: '.:'
    id: fold_block_1
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Fold 1
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: epy_block_1_0
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\nimport psrdynspec\n\
      from psrdynspec import fold\nfrom collections import deque\n\n###CHANGE MEEEEEEEEEEE\n\
      \nclass fold_blk(gr.sync_block):\n    \"\"\"Block to perform folding (without\
      \ importing but still [ab]using psrdynspec)\"\"\"\n\n    def __init__(self,\
      \ period=0.0333924123 , samp_rate=1000000/32, integration_time=10.):\n     \
      \   \"\"\"\n        Folding block - folds time series of power to find pulsars.\n\
      \n        Parameters\n        ----------\n\n        period : float\n       \
      \     Folding period\n\n        samp_rate : float\n            Sample rate of\
      \ incoming samples\n\n        integration_time : float\n            Number of\
      \ seconds over which to integrate\n        \n        Notes\n        -----\n\
      \        Always outputs the last calculated phase vs. power profile.\n\n   \
      \     After calculating, immediately begins collecting data for a new calculation.\n\
      \        \n        \"\"\"\n        gr.sync_block.__init__(\n            self,\n\
      \            name='Fold 1',\n            in_sig=[np.float32],\n            out_sig=[(np.float32,\
      \ 1024)]    # 1024 bins; if needing more/fewer bins, must also manually change\
      \ this\n        )\n        self.period = float(period)\n        self.samp_rate\
      \ = float(samp_rate)\n        self.integration_time = float(integration_time)\n\
      \n        self.bins = 1024\n        self.profile = np.zeros(self.bins)\n   \
      \     self.data = np.array([], dtype=np.float32)\n\n        self.fold_ts = fold.fold_ts\n\
      \n    def work(self, input_items, output_items):\n\n        # aggregate data\n\
      \        self.data = np.append(self.data, input_items[0])\n\n        # if enough\
      \ data collected\n        if self.data.size >= self.samp_rate * self.integration_time:\n\
      \            times = np.arange(self.data.size) / self.samp_rate\n          \
      \  self.profile = np.nan_to_num(self.fold_ts(self.data, times, self.period,\
      \ self.bins, True)[0])\n            self.data = np.array([], dtype=np.float32)\n\
      \n        # always output the latest computed profile\n        output_items[0][:]\
      \ = np.array([self.profile] * output_items[0].shape[0])\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    integration_time: integration_time
    maxoutbuf: '0'
    minoutbuf: '0'
    period: period
    samp_rate: samp_rate
  states:
    _io_cache: ('Fold 1', 'fold_blk', [('period', '0.0333924123'), ('samp_rate', '31250.0'),
      ('integration_time', '10.0')], [('0', 'float', 1)], [('0', 'float', 1024)],
      'Block to perform folding (without importing but still [ab]using psrdynspec)',
      ['integration_time', 'period', 'samp_rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [176, 148.0]
    rotation: 0
    state: enabled
- name: integration_time
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: ''
    short_id: ''
    type: eng_float
    value: '30'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [272, 20.0]
    rotation: 0
    state: true
- name: pad_sink_0
  id: pad_sink
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    label: out
    num_streams: '1'
    optional: 'False'
    type: float
    vlen: '1024'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [360, 152.0]
    rotation: 0
    state: true
- name: pad_source_0
  id: pad_source
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    label: in
    maxoutbuf: '0'
    minoutbuf: '0'
    num_streams: '1'
    optional: 'False'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [40, 156.0]
    rotation: 0
    state: true
- name: period
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: ''
    short_id: ''
    type: eng_float
    value: '.0335'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [208, 20.0]
    rotation: 0
    state: true
- name: samp_rate
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: ''
    short_id: ''
    type: eng_float
    value: 1000000/32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [136, 20.0]
    rotation: 0
    state: true

connections:
- [epy_block_1_0, '0', pad_sink_0, '0']
- [pad_source_0, '0', epy_block_1_0, '0']

metadata:
  file_format: 1
