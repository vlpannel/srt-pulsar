options:
  parameters:
    author: vivelpanel
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: store_channels
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Channelize DRF Data
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '32000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [128, 8.0]
    rotation: 0
    state: enabled
- name: subchannels
  id: variable
  parameters:
    comment: 'The number of

      subchannels a

      channel being

      read has.'
    value: '2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [200, 8.0]
    rotation: 0
    state: true
- name: blocks_interleaved_short_to_complex_0
  id: blocks_interleaved_short_to_complex
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    scale_factor: '1.0'
    swap: 'False'
    vector_input: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [432, 104.0]
    rotation: 0
    state: true
- name: blocks_null_sink_0
  id: blocks_null_sink
  parameters:
    affinity: ''
    alias: ''
    bus_structure_sink: '[[0,],]'
    comment: ''
    num_inputs: '1'
    type: short
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [344, 156.0]
    rotation: 0
    state: true
- name: blocks_streams_to_vector_0
  id: blocks_streams_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_streams: '10'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [272, 220.0]
    rotation: 180
    state: true
- name: blocks_throttle_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: short
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [312, 108.0]
    rotation: 0
    state: true
- name: blocks_vector_to_streams_0
  id: blocks_vector_to_streams
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_streams: subchannels
    type: short
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [176, 108.0]
    rotation: 0
    state: true
- name: bounds
  id: epy_module
  parameters:
    alias: ''
    comment: ''
    source_code: "# this module will be imported in the into your flowgraph\n\nimport\
      \ digital_rf\n\nsource_filepath = '/Volumes/NO NAME/pulsar/2022-05-26/rf_data'\n\
      sink_filepath = '/Users/vivelpanel/Desktop/SRT UROP 2022/Spectrogram/drf_out'\n\
      d = digital_rf.DigitalRFReader(source_filepath)\nchannel = 'misa-l2'\n\ndef\
      \ check_channel():\n    \"\"\"\n    Checks to make sure channel is within source\
      \ of RF data. Raises AssertionError if not.\n    \"\"\"\n    try:\n        assert\
      \ channel in d.get_channels()\n    except AssertionError:\n        print('That\
      \ channel isn\\'t in this data!')\n\ndef sindex(offset):\n    \"\"\"\n    Generates\
      \ a start index of DRF reading by returning the index of the first sample in\
      \ channel plus some offset.\n\n    Parameters:\n        offset : int\n     \
      \       Integer offset for how many samples after first sample should start\
      \ reading.\n    \"\"\"\n    check_channel()\n    return d.get_bounds(channel)[0]\n\
      \ndef eindex(factor):\n    \"\"\"\n    Generates an end index of DRF reading\
      \ by returning the index of a sample that is 1/factor the way through the entire\
      \ series of samples.\n\n    Parameters:\n        factor : int or float\n   \
      \         Denominator for proportion of samples to be read, eg., if factor is\
      \ 10 then 1/10 of samples will be read.\n    \"\"\"\n    check_channel()\n \
      \   s, e = d.get_bounds(channel)\n    return (e - s) / factor\n"
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [512, 24.0]
    rotation: 0
    state: true
- name: chan_name
  id: epy_module
  parameters:
    alias: ''
    comment: ''
    source_code: "# this module will be imported in the into your flowgraph\n\n\"\"\
      \"\nThis code generates the names of the files that store each channel output.\n\
      \"\"\"\n\nclass ChannelFile:\n    basename = '/chan/created_channel_'\n    index\
      \ = 0\n\n    def __init__(self, param=1):\n        self.filename = basename\
      \ + str(index)\n        index += 1\n\n    def get_name(self):\n        return\
      \ self.filename\n"
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [288, 24.0]
    rotation: 0
    state: true
- name: gr_digital_rf_digital_rf_sink_0
  id: gr_digital_rf_digital_rf_sink
  parameters:
    affinity: ''
    alias: ''
    center_freqs: '[]'
    channel0: ch0
    channel1: ch1
    channel10: ch10
    channel11: ch11
    channel12: ch12
    channel13: ch13
    channel14: ch14
    channel15: ch15
    channel16: ch16
    channel17: ch17
    channel18: ch18
    channel19: ch19
    channel2: ch2
    channel20: ch20
    channel21: ch21
    channel22: ch22
    channel23: ch23
    channel24: ch24
    channel25: ch25
    channel26: ch26
    channel27: ch27
    channel28: ch28
    channel29: ch29
    channel3: ch3
    channel30: ch30
    channel31: ch31
    channel4: ch4
    channel5: ch5
    channel6: ch6
    channel7: ch7
    channel8: ch8
    channel9: ch9
    checksum: 'False'
    comment: ''
    compression_level: '0'
    debug: 'False'
    file_cadence_ms: '1000'
    ignore_tags: 'False'
    input: fc32
    is_continuous: 'True'
    marching_periods: 'True'
    metadata: '{''grc_generated'': True, ''input_type'': ''vector length10 cf64''}'
    min_chunksize: '0'
    nchan: '1'
    sample_rate_denominator: '1'
    sample_rate_numerator: int(samp_rate)
    start: bounds.sindex(1000)
    stop_on_skipped: 'False'
    stop_on_time_tag: 'False'
    subdir_cadence_s: '3600'
    top_level_dir: bounds.sink_filepath
    uuid: hopethisfirsttryworks
    vlen: '10'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [56, 240.0]
    rotation: 180
    state: true
- name: gr_digital_rf_digital_rf_source_0
  id: gr_digital_rf_digital_rf_source
  parameters:
    affinity: ''
    alias: ''
    channel0: misa-l2
    channel1: ch1
    channel10: ch10
    channel11: ch11
    channel12: ch12
    channel13: ch13
    channel14: ch14
    channel15: ch15
    channel16: ch16
    channel17: ch17
    channel18: ch18
    channel19: ch19
    channel2: ch2
    channel20: ch20
    channel21: ch21
    channel22: ch22
    channel23: ch23
    channel24: ch24
    channel25: ch25
    channel26: ch26
    channel27: ch27
    channel28: ch28
    channel29: ch29
    channel3: ch3
    channel30: ch30
    channel31: ch31
    channel4: ch4
    channel5: ch5
    channel6: ch6
    channel7: ch7
    channel8: ch8
    channel9: ch9
    comment: ''
    end0: bounds.eindex(100)
    end1: ''
    end10: ''
    end11: ''
    end12: ''
    end13: ''
    end14: ''
    end15: ''
    end16: ''
    end17: ''
    end18: ''
    end19: ''
    end2: ''
    end20: ''
    end21: ''
    end22: ''
    end23: ''
    end24: ''
    end25: ''
    end26: ''
    end27: ''
    end28: ''
    end29: ''
    end3: ''
    end30: ''
    end31: ''
    end4: ''
    end5: ''
    end6: ''
    end7: ''
    end8: ''
    end9: ''
    gapless: 'False'
    hide_msg_port: 'True'
    maxoutbuf: '0'
    min_chunksize: '0'
    minoutbuf: '0'
    nchan: '1'
    repeat: 'True'
    start0: bounds.sindex(0)
    start1: ''
    start10: ''
    start11: ''
    start12: ''
    start13: ''
    start14: ''
    start15: ''
    start16: ''
    start17: ''
    start18: ''
    start19: ''
    start2: ''
    start20: ''
    start21: ''
    start22: ''
    start23: ''
    start24: ''
    start25: ''
    start26: ''
    start27: ''
    start28: ''
    start29: ''
    start3: ''
    start30: ''
    start31: ''
    start4: ''
    start5: ''
    start6: ''
    start7: ''
    start8: ''
    start9: ''
    throttle: 'False'
    top_level_dir: bounds.source_filepath
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 84.0]
    rotation: 0
    state: true
- name: note_0
  id: note
  parameters:
    alias: ''
    comment: 'DRF Source block is not filled

      out and chan_name script is

      not complete (doesn''t include

      file path).'
    note: Currently nonfunctional
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [384, 24.0]
    rotation: 0
    state: disabled
- name: pfb_channelizer_ccf_0
  id: pfb_channelizer_ccf
  parameters:
    affinity: ''
    alias: ''
    atten: '100'
    bus_conns: '[[0,],]'
    ch_map: '[]'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    nchans: '10'
    osr: '1.0'
    samp_delay: '0'
    taps: '[]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [464, 220.0]
    rotation: 180
    state: true

connections:
- [blocks_interleaved_short_to_complex_0, '0', pfb_channelizer_ccf_0, '0']
- [blocks_streams_to_vector_0, '0', gr_digital_rf_digital_rf_sink_0, '0']
- [blocks_throttle_0, '0', blocks_interleaved_short_to_complex_0, '0']
- [blocks_vector_to_streams_0, '0', blocks_throttle_0, '0']
- [blocks_vector_to_streams_0, '1', blocks_null_sink_0, '0']
- [gr_digital_rf_digital_rf_source_0, '0', blocks_vector_to_streams_0, '0']
- [pfb_channelizer_ccf_0, '0', blocks_streams_to_vector_0, '0']
- [pfb_channelizer_ccf_0, '1', blocks_streams_to_vector_0, '1']
- [pfb_channelizer_ccf_0, '2', blocks_streams_to_vector_0, '2']
- [pfb_channelizer_ccf_0, '3', blocks_streams_to_vector_0, '3']
- [pfb_channelizer_ccf_0, '4', blocks_streams_to_vector_0, '4']
- [pfb_channelizer_ccf_0, '5', blocks_streams_to_vector_0, '5']
- [pfb_channelizer_ccf_0, '6', blocks_streams_to_vector_0, '6']
- [pfb_channelizer_ccf_0, '7', blocks_streams_to_vector_0, '7']
- [pfb_channelizer_ccf_0, '8', blocks_streams_to_vector_0, '8']
- [pfb_channelizer_ccf_0, '9', blocks_streams_to_vector_0, '9']

metadata:
  file_format: 1
