options:
  parameters:
    author: vivelpanel
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: pulsar_simulator
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: center_freq
  id: variable
  parameters:
    comment: ''
    value: 440e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 80.0]
    rotation: 0
    state: enabled
- name: f_off
  id: variable
  parameters:
    comment: ''
    value: .1e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [232, 312.0]
    rotation: 0
    state: true
- name: 'off'
  id: variable
  parameters:
    comment: ''
    value: '.01'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [240, 240.0]
    rotation: 0
    state: true
- name: per
  id: variable
  parameters:
    comment: ''
    value: '.33'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [232, 168.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 1e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12]
    rotation: 0
    state: enabled
- name: analog_fastnoise_source_x_0
  id: analog_fastnoise_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    noise_type: analog.GR_GAUSSIAN
    samples: '8192'
    seed: '234'
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [848, 904.0]
    rotation: 0
    state: enabled
- name: analog_fastnoise_source_x_0_0
  id: analog_fastnoise_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '.77'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    noise_type: analog.GR_GAUSSIAN
    samples: '8192'
    seed: '3872'
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [848, 1144.0]
    rotation: 0
    state: enabled
- name: analog_fastnoise_source_x_0_1
  id: analog_fastnoise_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    noise_type: analog.GR_UNIFORM
    samples: '8192'
    seed: '9'
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [848, 976.0]
    rotation: 0
    state: enabled
- name: analog_fastnoise_source_x_0_2
  id: analog_fastnoise_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '.46'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    noise_type: analog.GR_GAUSSIAN
    samples: '8192'
    seed: '0'
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [848, 1048.0]
    rotation: 0
    state: enabled
- name: analog_noise_source_x_0
  id: analog_noise_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: Noise
    maxoutbuf: '0'
    minoutbuf: '0'
    noise_type: analog.GR_GAUSSIAN
    seed: '55555'
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [872, 1240.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: center_freq - (4*f_off)
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [376, 4.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: Pulsar
    freq: center_freq
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [376, 512.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0_0_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: 'Pulsar


      For SIMPLICITY''s sake,

      estimating that dispersion

      is linear and frequencies

      are discrete (even though

      this is known to be false).'
    freq: center_freq + (5*f_off)
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [376, 1152.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0_1
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: center_freq - f_off
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [376, 384.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0_1_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: center_freq + (4*f_off)
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [376, 1024.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0_2
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: center_freq - (2*f_off)
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [376, 256.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0_2_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: center_freq + (3*f_off)
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [376, 896.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0_3
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: center_freq - (3*f_off)
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [376, 128.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0_3_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: center_freq + (2*f_off)
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [376, 768.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0_4
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: center_freq + f_off
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [376, 640.0]
    rotation: 0
    state: enabled
- name: blocks_add_xx_0
  id: blocks_add_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1216, 240.0]
    rotation: 0
    state: enabled
- name: blocks_add_xx_1
  id: blocks_add_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '5'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1312, 1000.0]
    rotation: 0
    state: enabled
- name: blocks_add_xx_2
  id: blocks_add_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '10'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1016, 104.0]
    rotation: 0
    state: enabled
- name: blocks_throttle_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1320, 248.0]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport time\n\nclass blk(gr.sync_block):  # other base\
      \ classes are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python\
      \ Block example - a simple multiply const\"\"\"\n\n    def __init__(self, period=.33,\
      \ offset=0):  # only default arguments here\n        \"\"\"arguments to this\
      \ function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Pulse',   # will show up in GRC\n    \
      \        in_sig=[np.complex64],\n            out_sig=[np.complex64]\n      \
      \  )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.per\
      \ = period\n        self.off = offset\n        self.s = time.time()\n\n    def\
      \ work(self, input_items, output_items):\n        \"\"\"example: multiply with\
      \ constant\"\"\"\n        pulse_flag = ((time.time() - self.s - self.off) %\
      \ self.per) <= .01\n        output_items[0][:] = input_items[0] * int(pulse_flag)\
      \ * .5\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    period: per
  states:
    _io_cache: ('Pulse', 'blk', [('period', '0.33'), ('offset', '0')], [('0', 'complex',
      1)], [('0', 'complex', 1)], 'Embedded Python Block example - a simple multiply
      const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [632, 8.0]
    rotation: 0
    state: true
- name: epy_block_0_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport time\n\nclass blk(gr.sync_block):  # other base\
      \ classes are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python\
      \ Block example - a simple multiply const\"\"\"\n\n    def __init__(self, period=.33,\
      \ offset=0):  # only default arguments here\n        \"\"\"arguments to this\
      \ function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Pulse',   # will show up in GRC\n    \
      \        in_sig=[np.complex64],\n            out_sig=[np.complex64]\n      \
      \  )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.per\
      \ = period\n        self.off = offset\n        self.s = time.time()\n\n    def\
      \ work(self, input_items, output_items):\n        \"\"\"example: multiply with\
      \ constant\"\"\"\n        pulse_flag = ((time.time() - self.s - self.off) %\
      \ self.per) <= .01\n        output_items[0][:] = input_items[0] * int(pulse_flag)\
      \ * .5\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '.4'
    period: per
  states:
    _io_cache: ('Pulse', 'blk', [('period', '0.33'), ('offset', '0')], [('0', 'complex',
      1)], [('0', 'complex', 1)], 'Embedded Python Block example - a simple multiply
      const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [632, 376.0]
    rotation: 0
    state: true
- name: epy_block_0_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport time\n\nclass blk(gr.sync_block):  # other base\
      \ classes are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python\
      \ Block example - a simple multiply const\"\"\"\n\n    def __init__(self, period=.33,\
      \ offset=0):  # only default arguments here\n        \"\"\"arguments to this\
      \ function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Pulse',   # will show up in GRC\n    \
      \        in_sig=[np.complex64],\n            out_sig=[np.complex64]\n      \
      \  )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.per\
      \ = period\n        self.off = offset\n        self.s = time.time()\n\n    def\
      \ work(self, input_items, output_items):\n        \"\"\"example: multiply with\
      \ constant\"\"\"\n        pulse_flag = ((time.time() - self.s - self.off) %\
      \ self.per) <= .01\n        output_items[0][:] = input_items[0] * int(pulse_flag)\
      \ * .5\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '.3'
    period: per
  states:
    _io_cache: ('Pulse', 'blk', [('period', '0.33'), ('offset', '0')], [('0', 'complex',
      1)], [('0', 'complex', 1)], 'Embedded Python Block example - a simple multiply
      const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [632, 280.0]
    rotation: 0
    state: true
- name: epy_block_0_2
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport time\n\nclass blk(gr.sync_block):  # other base\
      \ classes are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python\
      \ Block example - a simple multiply const\"\"\"\n\n    def __init__(self, period=.33,\
      \ offset=0):  # only default arguments here\n        \"\"\"arguments to this\
      \ function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Pulse',   # will show up in GRC\n    \
      \        in_sig=[np.complex64],\n            out_sig=[np.complex64]\n      \
      \  )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.per\
      \ = period\n        self.off = offset\n        self.s = time.time()\n\n    def\
      \ work(self, input_items, output_items):\n        \"\"\"example: multiply with\
      \ constant\"\"\"\n        pulse_flag = ((time.time() - self.s - self.off) %\
      \ self.per) <= .01\n        output_items[0][:] = input_items[0] * int(pulse_flag)\
      \ * .5\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '.2'
    period: per
  states:
    _io_cache: ('Pulse', 'blk', [('period', '0.33'), ('offset', '0')], [('0', 'complex',
      1)], [('0', 'complex', 1)], 'Embedded Python Block example - a simple multiply
      const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [632, 184.0]
    rotation: 0
    state: true
- name: epy_block_0_3
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport time\n\nclass blk(gr.sync_block):  # other base\
      \ classes are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python\
      \ Block example - a simple multiply const\"\"\"\n\n    def __init__(self, period=.33,\
      \ offset=0):  # only default arguments here\n        \"\"\"arguments to this\
      \ function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Pulse',   # will show up in GRC\n    \
      \        in_sig=[np.complex64],\n            out_sig=[np.complex64]\n      \
      \  )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.per\
      \ = period\n        self.off = offset\n        self.s = time.time()\n\n    def\
      \ work(self, input_items, output_items):\n        \"\"\"example: multiply with\
      \ constant\"\"\"\n        pulse_flag = ((time.time() - self.s - self.off) %\
      \ self.per) <= .01\n        output_items[0][:] = input_items[0] * int(pulse_flag)\
      \ * .5\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '.5'
    period: per
  states:
    _io_cache: ('Pulse', 'blk', [('period', '0.33'), ('offset', '0')], [('0', 'complex',
      1)], [('0', 'complex', 1)], 'Embedded Python Block example - a simple multiply
      const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [632, 480.0]
    rotation: 0
    state: true
- name: epy_block_0_3_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport time\n\nclass blk(gr.sync_block):  # other base\
      \ classes are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python\
      \ Block example - a simple multiply const\"\"\"\n\n    def __init__(self, period=.33,\
      \ offset=0):  # only default arguments here\n        \"\"\"arguments to this\
      \ function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Pulse',   # will show up in GRC\n    \
      \        in_sig=[np.complex64],\n            out_sig=[np.complex64]\n      \
      \  )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.per\
      \ = period\n        self.off = offset\n        self.s = time.time()\n\n    def\
      \ work(self, input_items, output_items):\n        \"\"\"example: multiply with\
      \ constant\"\"\"\n        pulse_flag = ((time.time() - self.s - self.off) %\
      \ self.per) <= .01\n        output_items[0][:] = input_items[0] * int(pulse_flag)\
      \ * .5\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '.6'
    period: per
  states:
    _io_cache: ('Pulse', 'blk', [('period', '0.33'), ('offset', '0')], [('0', 'complex',
      1)], [('0', 'complex', 1)], 'Embedded Python Block example - a simple multiply
      const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [632, 616.0]
    rotation: 0
    state: true
- name: epy_block_0_3_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport time\n\nclass blk(gr.sync_block):  # other base\
      \ classes are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python\
      \ Block example - a simple multiply const\"\"\"\n\n    def __init__(self, period=.33,\
      \ offset=0):  # only default arguments here\n        \"\"\"arguments to this\
      \ function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Pulse',   # will show up in GRC\n    \
      \        in_sig=[np.complex64],\n            out_sig=[np.complex64]\n      \
      \  )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.per\
      \ = period\n        self.off = offset\n        self.s = time.time()\n\n    def\
      \ work(self, input_items, output_items):\n        \"\"\"example: multiply with\
      \ constant\"\"\"\n        pulse_flag = ((time.time() - self.s - self.off) %\
      \ self.per) <= .01\n        output_items[0][:] = input_items[0] * int(pulse_flag)\
      \ * .5\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '.7'
    period: per
  states:
    _io_cache: ('Pulse', 'blk', [('period', '0.33'), ('offset', '0')], [('0', 'complex',
      1)], [('0', 'complex', 1)], 'Embedded Python Block example - a simple multiply
      const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [632, 752.0]
    rotation: 0
    state: true
- name: epy_block_0_3_2
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport time\n\nclass blk(gr.sync_block):  # other base\
      \ classes are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python\
      \ Block example - a simple multiply const\"\"\"\n\n    def __init__(self, period=.33,\
      \ offset=0):  # only default arguments here\n        \"\"\"arguments to this\
      \ function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Pulse',   # will show up in GRC\n    \
      \        in_sig=[np.complex64],\n            out_sig=[np.complex64]\n      \
      \  )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.per\
      \ = period\n        self.off = offset\n        self.s = time.time()\n\n    def\
      \ work(self, input_items, output_items):\n        \"\"\"example: multiply with\
      \ constant\"\"\"\n        pulse_flag = ((time.time() - self.s - self.off) %\
      \ self.per) <= .01\n        output_items[0][:] = input_items[0] * int(pulse_flag)\
      \ * .5\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '.8'
    period: per
  states:
    _io_cache: ('Pulse', 'blk', [('period', '0.33'), ('offset', '0')], [('0', 'complex',
      1)], [('0', 'complex', 1)], 'Embedded Python Block example - a simple multiply
      const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [632, 904.0]
    rotation: 0
    state: true
- name: epy_block_0_3_3
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport time\n\nclass blk(gr.sync_block):  # other base\
      \ classes are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python\
      \ Block example - a simple multiply const\"\"\"\n\n    def __init__(self, period=.33,\
      \ offset=0):  # only default arguments here\n        \"\"\"arguments to this\
      \ function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Pulse',   # will show up in GRC\n    \
      \        in_sig=[np.complex64],\n            out_sig=[np.complex64]\n      \
      \  )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.per\
      \ = period\n        self.off = offset\n        self.s = time.time()\n\n    def\
      \ work(self, input_items, output_items):\n        \"\"\"example: multiply with\
      \ constant\"\"\"\n        pulse_flag = ((time.time() - self.s - self.off) %\
      \ self.per) <= .01\n        output_items[0][:] = input_items[0] * int(pulse_flag)\
      \ * .5\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '.9'
    period: per
  states:
    _io_cache: ('Pulse', 'blk', [('period', '0.33'), ('offset', '0')], [('0', 'complex',
      1)], [('0', 'complex', 1)], 'Embedded Python Block example - a simple multiply
      const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [632, 1080.0]
    rotation: 0
    state: true
- name: epy_block_0_4
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport time\n\nclass blk(gr.sync_block):  # other base\
      \ classes are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python\
      \ Block example - a simple multiply const\"\"\"\n\n    def __init__(self, period=.33,\
      \ offset=0):  # only default arguments here\n        \"\"\"arguments to this\
      \ function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Pulse',   # will show up in GRC\n    \
      \        in_sig=[np.complex64],\n            out_sig=[np.complex64]\n      \
      \  )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.per\
      \ = period\n        self.off = offset\n        self.s = time.time()\n\n    def\
      \ work(self, input_items, output_items):\n        \"\"\"example: multiply with\
      \ constant\"\"\"\n        pulse_flag = ((time.time() - self.s - self.off) %\
      \ self.per) <= .01\n        output_items[0][:] = input_items[0] * int(pulse_flag)\
      \ * .5\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '.1'
    period: per
  states:
    _io_cache: ('Pulse', 'blk', [('period', '0.33'), ('offset', '0')], [('0', 'complex',
      1)], [('0', 'complex', 1)], 'Embedded Python Block example - a simple multiply
      const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [632, 96.0]
    rotation: 0
    state: true
- name: gr_digital_rf_digital_rf_sink_0
  id: gr_digital_rf_digital_rf_sink
  parameters:
    affinity: ''
    alias: ''
    center_freqs: '[]'
    channel0: fake-misa
    channel1: ch1
    channel10: ch10
    channel11: ch11
    channel12: ch12
    channel13: ch13
    channel14: ch14
    channel15: ch15
    channel16: ch16
    channel17: ch17
    channel18: ch18
    channel19: ch19
    channel2: ch2
    channel20: ch20
    channel21: ch21
    channel22: ch22
    channel23: ch23
    channel24: ch24
    channel25: ch25
    channel26: ch26
    channel27: ch27
    channel28: ch28
    channel29: ch29
    channel3: ch3
    channel30: ch30
    channel31: ch31
    channel4: ch4
    channel5: ch5
    channel6: ch6
    channel7: ch7
    channel8: ch8
    channel9: ch9
    checksum: 'False'
    comment: 'DON''T make time = ''now''

      because that causes issues

      when reading DRF data.'
    compression_level: '0'
    debug: 'False'
    file_cadence_ms: '1000'
    ignore_tags: 'False'
    input: fc32
    is_continuous: 'True'
    marching_periods: 'True'
    metadata: '{}'
    min_chunksize: '0'
    nchan: '1'
    sample_rate_denominator: '1'
    sample_rate_numerator: int(samp_rate)
    start: ''
    stop_on_skipped: 'False'
    stop_on_time_tag: 'False'
    subdir_cadence_s: '3600'
    top_level_dir: C:\\Users\\vlpannel\\Desktop\\pulsar_sim
    uuid: ''
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1536, 352.0]
    rotation: 0
    state: true
- name: qtgui_sink_x_0
  id: qtgui_sink_x
  parameters:
    affinity: ''
    alias: ''
    bw: samp_rate
    comment: ''
    fc: center_freq
    fftsize: '1024'
    gui_hint: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    plotconst: 'True'
    plotfreq: 'True'
    plottime: 'True'
    plotwaterfall: 'True'
    rate: '10'
    showports: 'False'
    showrf: 'False'
    type: complex
    wintype: window.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1536, 216.0]
    rotation: 0
    state: true

connections:
- [analog_fastnoise_source_x_0, '0', blocks_add_xx_1, '0']
- [analog_fastnoise_source_x_0_0, '0', blocks_add_xx_1, '3']
- [analog_fastnoise_source_x_0_1, '0', blocks_add_xx_1, '1']
- [analog_fastnoise_source_x_0_2, '0', blocks_add_xx_1, '2']
- [analog_noise_source_x_0, '0', blocks_add_xx_1, '4']
- [analog_sig_source_x_0, '0', epy_block_0, '0']
- [analog_sig_source_x_0_0, '0', epy_block_0_0, '0']
- [analog_sig_source_x_0_0_0, '0', epy_block_0_3_3, '0']
- [analog_sig_source_x_0_1, '0', epy_block_0_1, '0']
- [analog_sig_source_x_0_1_0, '0', epy_block_0_3_2, '0']
- [analog_sig_source_x_0_2, '0', epy_block_0_2, '0']
- [analog_sig_source_x_0_2_0, '0', epy_block_0_3_1, '0']
- [analog_sig_source_x_0_3, '0', epy_block_0_4, '0']
- [analog_sig_source_x_0_3_0, '0', epy_block_0_3_0, '0']
- [analog_sig_source_x_0_4, '0', epy_block_0_3, '0']
- [blocks_add_xx_0, '0', blocks_throttle_0, '0']
- [blocks_add_xx_1, '0', blocks_add_xx_0, '1']
- [blocks_add_xx_2, '0', blocks_add_xx_0, '0']
- [blocks_throttle_0, '0', gr_digital_rf_digital_rf_sink_0, '0']
- [blocks_throttle_0, '0', qtgui_sink_x_0, '0']
- [epy_block_0, '0', blocks_add_xx_2, '0']
- [epy_block_0_0, '0', blocks_add_xx_2, '4']
- [epy_block_0_1, '0', blocks_add_xx_2, '3']
- [epy_block_0_2, '0', blocks_add_xx_2, '2']
- [epy_block_0_3, '0', blocks_add_xx_2, '5']
- [epy_block_0_3_0, '0', blocks_add_xx_2, '6']
- [epy_block_0_3_1, '0', blocks_add_xx_2, '7']
- [epy_block_0_3_2, '0', blocks_add_xx_2, '8']
- [epy_block_0_3_3, '0', blocks_add_xx_2, '9']
- [epy_block_0_4, '0', blocks_add_xx_2, '1']

metadata:
  file_format: 1
  grc_version: 3.10.3.0
